diff --git a/apps/api-docs-app/src/environments/environment.ts b/apps/api-docs-app/src/environments/environment.ts
index 0eaac3f50..ebf8fcd53 100644
--- a/apps/api-docs-app/src/environments/environment.ts
+++ b/apps/api-docs-app/src/environments/environment.ts
@@ -7,10 +7,10 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:api-docs-app' }),
-    CLIENT_SECRET: envalid.str(),
+    CLIENT_SECRET: envalid.str({ default: 'd90b4959-14e8-4f7b-9d24-7e47f7936b83' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
     PORT: envalid.num({ default: 3330 }),
   },
diff --git a/apps/cache-service/src/cache/model/cacheTarget.ts b/apps/cache-service/src/cache/model/cacheTarget.ts
index 80c7bbdb9..18c1361b6 100644
--- a/apps/cache-service/src/cache/model/cacheTarget.ts
+++ b/apps/cache-service/src/cache/model/cacheTarget.ts
@@ -147,10 +147,11 @@ export class CacheTarget implements Target {
 
     const relative = req.originalUrl.substring(`${req.baseUrl}/cache/${this.serviceId}`.length);
     const targetPath = path.join(upstreamUrl.pathname, relative);
-    if (!targetPath.includes(upstreamUrl.pathname)) {
-      throw new InvalidOperationError('Request path not supported.');
-    }
+    // if (!targetPath.includes(upstreamUrl.pathname)) {
+    //   throw new InvalidOperationError('Request path not supported.');
+    // }
 
+    console.log(`in cache service`);
     const requestUrl = new URL(targetPath, upstreamUrl);
     const request = requestUrl.protocol === 'https:' ? httpsRequest : httpRequest;
 
diff --git a/apps/cache-service/src/cache/router.ts b/apps/cache-service/src/cache/router.ts
index 0ca239bd5..af6d361a1 100644
--- a/apps/cache-service/src/cache/router.ts
+++ b/apps/cache-service/src/cache/router.ts
@@ -1,6 +1,7 @@
 import { InvalidOperationError, NotFoundError } from '@core-services/core-common';
 import { RequestHandler, Router } from 'express';
 import { CacheServiceConfiguration } from './configuration';
+import { AdspId } from '@abgov/adsp-service-sdk';
 
 export function getCacheTargetResource(): RequestHandler {
   return async (req, res, next) => {
@@ -9,6 +10,7 @@ export function getCacheTargetResource(): RequestHandler {
       const tenant = req.tenant;
 
       if (!tenant) {
+        console.log('in here error');
         throw new InvalidOperationError('Tenant context is required to read through cache.');
       }
 
@@ -27,7 +29,6 @@ export function getCacheTargetResource(): RequestHandler {
 
 export function createCacheRouter() {
   const router = Router();
-
   router.get('/cache/:target/*', getCacheTargetResource());
 
   return router;
diff --git a/apps/cache-service/src/environments/environment.ts b/apps/cache-service/src/environments/environment.ts
index 69e4e7fe9..d5629523b 100644
--- a/apps/cache-service/src/environments/environment.ts
+++ b/apps/cache-service/src/environments/environment.ts
@@ -7,18 +7,18 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:cache-service' }),
-    CLIENT_SECRET: envalid.str(),
-    REDIS_HOST: envalid.str({ default: 'cache-redis' }),
+    CLIENT_SECRET: envalid.str({ default: 'OornLBEvk9KhEmtjqQYblQFUcZ95hh2x' }),
+    REDIS_HOST: envalid.str({ default: '127.0.0.1' }),
     REDIS_PORT: envalid.num({ default: 6379 }),
     REDIS_PASSWORD: envalid.str({ default: '' }),
     AMQP_HOST: envalid.str({ default: 'localhost' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    PORT: envalid.num({ default: 3347 }),
+    PORT: envalid.num({ default: 3360 }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
   },
   {
diff --git a/apps/cache-service/src/main.ts b/apps/cache-service/src/main.ts
index 2b73daab2..cc4c07b6b 100644
--- a/apps/cache-service/src/main.ts
+++ b/apps/cache-service/src/main.ts
@@ -37,6 +37,7 @@ const initializeApp = async (): Promise<express.Application> => {
     app.set('trust proxy', environment.TRUSTED_PROXY);
   }
 
+  console.log(`starting cache service....`);
   const serviceId = AdspId.parse(environment.CLIENT_ID);
   const accessServiceUrl = new URL(environment.KEYCLOAK_ROOT_URL);
 
diff --git a/apps/calendar-service/src/environments/environment.ts b/apps/calendar-service/src/environments/environment.ts
index 49d79d67b..9d1d33c21 100644
--- a/apps/calendar-service/src/environments/environment.ts
+++ b/apps/calendar-service/src/environments/environment.ts
@@ -3,23 +3,22 @@ import * as envalid from 'envalid';
 import * as util from 'util';
 
 dotenv.config();
-
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:calendar-service' }),
-    CLIENT_SECRET: envalid.str({ default: '' }),
+    CLIENT_SECRET: envalid.str({ default: '8f80a819-3fa1-4066-bc70-3e7c5f4e9cc5' }),
     TIME_ZONE: envalid.str({ default: 'America/Edmonton' }),
-    DB_HOST: envalid.str({ default: 'localhost' }),
+    DB_HOST: envalid.str({ default: '127.0.0.1' }),
     DB_PORT: envalid.num({ default: 5432 }),
     DB_NAME: envalid.str({ default: 'postgres' }),
     DB_USER: envalid.str({ default: 'postgres' }),
-    DB_PASSWORD: envalid.str({ default: 'guest' }),
+    DB_PASSWORD: envalid.str({ default: 'NNN' }),
     DB_TLS: envalid.bool({ default: false }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    PORT: envalid.num({ default: 3341 }),
+    PORT: envalid.num({ default: 3343 }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
   },
   {
diff --git a/apps/calendar-service/src/main.ts b/apps/calendar-service/src/main.ts
index de20021d1..41be069da 100644
--- a/apps/calendar-service/src/main.ts
+++ b/apps/calendar-service/src/main.ts
@@ -159,7 +159,7 @@ const initializeApp = async (): Promise<express.Application> => {
 };
 
 initializeApp().then((app) => {
-  const port = environment.PORT || 3342;
+  const port = environment.PORT || 3343;
 
   const server = app.listen(port, () => {
     logger.info(`Listening at http://localhost:${port}`);
diff --git a/apps/comment-service/src/environments/environment.ts b/apps/comment-service/src/environments/environment.ts
index 00a735233..9e836314d 100644
--- a/apps/comment-service/src/environments/environment.ts
+++ b/apps/comment-service/src/environments/environment.ts
@@ -7,15 +7,15 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:comment-service' }),
-    CLIENT_SECRET: envalid.str(),
-    DB_HOST: envalid.str({ default: 'localhost' }),
+    CLIENT_SECRET: envalid.str({ default: 'fnUKQTr9z2UEmUktQWB9s3kbSK2djbaw' }),
+    DB_HOST: envalid.str({ default: '127.0.0.1' }),
     DB_PORT: envalid.num({ default: 5432 }),
-    DB_NAME: envalid.str({ default: 'postgres' }),
+    DB_NAME: envalid.str({ default: 'comment-db' }),
     DB_USER: envalid.str({ default: 'postgres' }),
-    DB_PASSWORD: envalid.str({ default: 'guest' }),
+    DB_PASSWORD: envalid.str({ default: 'NNNN' }),
     DB_TLS: envalid.bool({ default: false }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
     PORT: envalid.num({ default: 3346 }),
diff --git a/apps/configuration-service/src/environments/environment.ts b/apps/configuration-service/src/environments/environment.ts
index 799da6f41..22d868678 100644
--- a/apps/configuration-service/src/environments/environment.ts
+++ b/apps/configuration-service/src/environments/environment.ts
@@ -8,17 +8,17 @@ export const environment = envalid.cleanEnv(
   process.env,
   {
     KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
-    DIRECTORY_URL: envalid.str({ default: 'https://directory-service.adsp-dev.gov.ab.ca' }),
-    CLIENT_ID: envalid.str({ default: 'urn:ads:platform:configuration-service' }),
-    CLIENT_SECRET: envalid.str(),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    MONGO_URI: envalid.str({ default: 'mongodb://localhost:27017' }),
+    MONGO_URI: envalid.str({ default: 'mongodb://127.0.0.1:27017' }),
     MONGO_DB: envalid.str({ default: 'config' }),
     MONGO_TLS: envalid.bool({ default: false }),
     MONGO_USER: envalid.str({ default: '' }),
     MONGO_PASSWORD: envalid.str({ default: '' }),
-    PORT: envalid.num({ default: 3337 }),
+    PORT: envalid.num({ default: 3339 }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
+    CLIENT_ID: envalid.str({ default: 'urn:ads:platform:configuration-service' }),
+    CLIENT_SECRET: envalid.str({ default: 'a2c61cb4-fddf-41cd-96ca-b4c5a5976c27' }),
+    DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
   },
   {
     reporter: ({ errors }) => {
diff --git a/apps/directory-service/src/environments/environment.ts b/apps/directory-service/src/environments/environment.ts
index 7c6784bea..a88c1d4a5 100644
--- a/apps/directory-service/src/environments/environment.ts
+++ b/apps/directory-service/src/environments/environment.ts
@@ -7,14 +7,14 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
-    DIRECTORY_BOOTSTRAP: envalid.str({ default: '' }),
+    DIRECTORY_BOOTSTRAP: envalid.str({ default: 'directory.platform.json' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:directory-service' }),
-    CLIENT_SECRET: envalid.str(),
+    CLIENT_SECRET: envalid.str({ default: '1239e4f6-cc3e-4891-9e79-4b7413fe1369' }),
     MONGO_USER: envalid.str({ default: '' }),
     MONGO_PASSWORD: envalid.str({ default: '' }),
-    MONGO_URI: envalid.str({ default: 'mongodb://localhost:27017' }),
+    MONGO_URI: envalid.str({ default: 'mongodb://127.0.0.1:27017' }),
     MONGO_DB: envalid.str({ default: 'directoryDb' }),
     MONGO_TLS: envalid.bool({ default: false }),
     AMQP_HOST: envalid.str({ default: 'localhost' }),
diff --git a/apps/event-service/src/environments/environment.ts b/apps/event-service/src/environments/environment.ts
index 153680290..39fe93c7b 100644
--- a/apps/event-service/src/environments/environment.ts
+++ b/apps/event-service/src/environments/environment.ts
@@ -7,12 +7,12 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:event-service' }),
-    CLIENT_SECRET: envalid.str(),
+    CLIENT_SECRET: envalid.str({ default: '98c78ae7-e555-4600-aedd-62d64522efb0' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    AMQP_HOST: envalid.str({ default: 'localhost' }),
+    AMQP_HOST: envalid.str({ default: '127.0.0.1' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
     AMQP_URL: envalid.str({ default: '' }),
diff --git a/apps/feedback-service/src/environments/environment.ts b/apps/feedback-service/src/environments/environment.ts
index df0114980..914060591 100644
--- a/apps/feedback-service/src/environments/environment.ts
+++ b/apps/feedback-service/src/environments/environment.ts
@@ -7,11 +7,11 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca/auth' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:feedback-service' }),
-    CLIENT_SECRET: envalid.str(),
-    AMQP_HOST: envalid.str({ default: 'localhost' }),
+    CLIENT_SECRET: envalid.str({ default: 'rFluZV3rLzpltwkfWh4CfNxkfgyojTyn' }),
+    AMQP_HOST: envalid.str({ default: '127.0.0.1' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
diff --git a/apps/file-service/src/environments/environment.ts b/apps/file-service/src/environments/environment.ts
index 9735919c8..d5caeb2f8 100644
--- a/apps/file-service/src/environments/environment.ts
+++ b/apps/file-service/src/environments/environment.ts
@@ -13,11 +13,8 @@ export const environment = envalid.cleanEnv(
   process.env,
   {
     KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
-    DIRECTORY_URL: envalid.str({ default: 'https://localhost:3331' }),
-    CLIENT_ID: envalid.str({ default: 'urn:ads:platform:file-service' }),
-    CLIENT_SECRET: envalid.str({ default: '' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    MONGO_URI: envalid.str({ default: 'mongodb://localhost:27017' }),
+    MONGO_URI: envalid.str({ default: 'mongodb://127.0.0.1:27017' }),
     MONGO_DB: envalid.str({ default: 'file' }),
     MONGO_USER: envalid.str({ default: '' }),
     MONGO_PASSWORD: envalid.str({ default: '' }),
@@ -27,15 +24,20 @@ export const environment = envalid.cleanEnv(
     BLOB_ACCOUNT_URL: envalid.str({ default: '' }),
     BLOB_ACCOUNT_NAME: envalid.str({ default: '' }),
     BLOB_ACCOUNT_KEY: envalid.str({ default: '' }),
-    AV_HOST: envalid.str({ default: 'localhost' }),
+    AV_HOST: envalid.str({ default: '127.0.0.1' }),
     AV_PORT: envalid.num({ default: 3310 }),
     AV_PROVIDER: envalid.str({ default: 'clam' }),
-    AMQP_HOST: envalid.str({ default: 'localhost' }),
+    AMQP_HOST: envalid.str({ default: '127.0.0.1' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
     PORT: envalid.num({ default: 3337 }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
+
     POD_TYPE: envalid.str({ default: POD_TYPES.api }),
+
+    CLIENT_ID: envalid.str({ default: 'urn:ads:platform:file-service' }),
+    CLIENT_SECRET: envalid.str({ default: '70923b5a-6c57-4217-9e88-8ac2ac74fd3c' }),
+    DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
   },
   {
     reporter: ({ errors }) => {
diff --git a/apps/file-service/src/file/index.ts b/apps/file-service/src/file/index.ts
index 7b5751585..756f34ca6 100644
--- a/apps/file-service/src/file/index.ts
+++ b/apps/file-service/src/file/index.ts
@@ -33,7 +33,7 @@ interface FileMiddlewareProps extends Repositories {
   tenantService: TenantService;
   configurationService: ConfigurationService;
   tokenProvider: TokenProvider;
-  scanService: ScanService;
+  // scanService: ScanService;
 }
 
 export const applyFileMiddleware = (app: Application, props: FileMiddlewareProps): Application => {
diff --git a/apps/file-service/src/file/job/index.ts b/apps/file-service/src/file/job/index.ts
index 9776285af..14cdf95ab 100644
--- a/apps/file-service/src/file/job/index.ts
+++ b/apps/file-service/src/file/job/index.ts
@@ -23,7 +23,7 @@ interface FileJobProps {
   serviceId: AdspId;
   logger: Logger;
   fileRepository: FileRepository;
-  scanService: ScanService;
+  // scanService: ScanService;
   queueService: WorkQueueService<FileServiceWorkItem>;
   eventService: EventService;
   tenantService: TenantService;
@@ -32,7 +32,7 @@ interface FileJobProps {
 }
 
 export const createFileJobs = (props: FileJobProps): void => {
-  const scanJob = createScanJob(props);
+  //  const scanJob = createScanJob(props);
   const digestJob = createDigestJob(props);
   const deleteJob = createDeleteJob(props);
   const deleteOldFilesJob = createDeleteOldFilesJob(props);
@@ -41,30 +41,30 @@ export const createFileJobs = (props: FileJobProps): void => {
   if (environment.POD_TYPE === POD_TYPES.job) {
     schedule.scheduleJob('0 2 * * *', deleteOldFilesJob);
     props.logger.info(`Scheduled daily delete job.`);
-  }
-
-  props.queueService.getItems().subscribe(({ item, done }) => {
-    switch (item.work) {
-      case 'scan':
-        digestJob(item.tenantId, item.file, () => {
-          // TODO: This job should consume a distinct item on the work queue, but currently the items are just
-          // projections of file service domain events rather than dedicated work queue messages.
-          //
-          // Passing in work queue callback may result in interactions with the scan job; stubbing the callback
-          // effectively means failure in digest will not result in retry.
-        });
-        scanJob(item.tenantId, item.file, done);
-        break;
-      case 'delete':
-        deleteJob(item.tenantId, item.file, done);
-        break;
-      default: {
-        props.logger.debug(
-          `Received unrecognized file job '${item.work}' for file ${item.file.filename} (ID: ${item.file.id}).`
-        );
-        done();
-        break;
+  } else {
+    props.queueService.getItems().subscribe(({ item, done }) => {
+      switch (item.work) {
+        case 'scan':
+          digestJob(item.tenantId, item.file, () => {
+            // TODO: This job should consume a distinct item on the work queue, but currently the items are just
+            // projections of file service domain events rather than dedicated work queue messages.
+            //
+            // Passing in work queue callback may result in interactions with the scan job; stubbing the callback
+            // effectively means failure in digest will not result in retry.
+          });
+          //  scanJob(item.tenantId, item.file, done);
+          break;
+        case 'delete':
+          deleteJob(item.tenantId, item.file, done);
+          break;
+        default: {
+          props.logger.debug(
+            `Received unrecognized file job '${item.work}' for file ${item.file.filename} (ID: ${item.file.id}).`
+          );
+          done();
+          break;
+        }
       }
-    }
-  });
+    });
+  }
 };
diff --git a/apps/file-service/src/main.ts b/apps/file-service/src/main.ts
index 51d3352f8..85acd5334 100644
--- a/apps/file-service/src/main.ts
+++ b/apps/file-service/src/main.ts
@@ -179,10 +179,26 @@ async function initializeApp(): Promise<express.Application> {
     storageProvider,
   });
 
-  const scanService = createScanService(environment.AV_PROVIDER, {
-    host: environment.AV_HOST,
-    port: environment.AV_PORT,
-  });
+  // if (environment.POD_TYPE !== 'file-service-job') {
+  //   scanService = createScanService(environment.AV_PROVIDER, {
+  //     host: environment.AV_HOST,
+  //     port: environment.AV_PORT,
+  //   });
+  // }
+
+  //   let scanService: ScanService = null;
+
+  //   if (environment.APP_NAME !== 'file-service-job') {
+  //     scanService = createScanService(environment.AV_PROVIDER, {
+  //       host: environment.AV_HOST,
+  //       port: environment.AV_PORT,
+  //     });
+  //   }
+  // =======
+  //   // const scanService = createScanService(environment.AV_PROVIDER, {
+  //   //   host: environment.AV_HOST,
+  //   //   port: environment.AV_PORT,
+  //   // });
 
   const queueService = await createFileQueueService({ ...environment, logger });
 
@@ -202,7 +218,7 @@ async function initializeApp(): Promise<express.Application> {
     logger,
     storageProvider,
     eventService,
-    scanService,
+    // scanService,
     queueService,
     tenantService,
     configurationService,
diff --git a/apps/form-app/proxy.conf.json b/apps/form-app/proxy.conf.json
index 4760d33d9..619dfbdff 100644
--- a/apps/form-app/proxy.conf.json
+++ b/apps/form-app/proxy.conf.json
@@ -5,7 +5,7 @@
     "changeOrigin": true
   },
   "/api/*": {
-    "target": "http://localhost:3348",
+    "target": "http://localhost:3355",
     "pathRewrite": {
       "^/api": ""
     },
diff --git a/apps/form-app/src/app/state/config.slice.ts b/apps/form-app/src/app/state/config.slice.ts
index 19b6256a0..51c1ed488 100644
--- a/apps/form-app/src/app/state/config.slice.ts
+++ b/apps/form-app/src/app/state/config.slice.ts
@@ -19,13 +19,13 @@ export interface ConfigState {
 }
 
 export const initializeConfig = createAsyncThunk('config/initialize', async () => {
-  let environment = envStatic;
-  try {
-    const { data: envConfig } = await axios.get<Environment>('/config/config.json');
-    environment = envConfig;
-  } catch (error) {
-    // Use the static imported environment if config.json not available.
-  }
+  const environment = envStatic;
+  // try {
+  //   const { data: envConfig } = await axios.get<Environment>('/config/config.json');
+  //   environment = envConfig;
+  // } catch (error) {
+  //   // Use the static imported environment if config.json not available.
+  // }
 
   // Initialize state with environment and ADSP directory of services.
   const directoryUrl = environment?.directory?.['url'];
@@ -46,7 +46,6 @@ export const initializeConfig = createAsyncThunk('config/initialize', async () =
       // Tenant directory may not exist if no entries have been added.
     }
   }
-
   return { directory, environment };
 });
 
diff --git a/apps/form-app/src/environments/environment.ts b/apps/form-app/src/environments/environment.ts
index f1b3f0c6c..771579a6e 100644
--- a/apps/form-app/src/environments/environment.ts
+++ b/apps/form-app/src/environments/environment.ts
@@ -4,7 +4,8 @@
 export const environment = {
   production: false,
   directory: {
-    url: 'https://directory-service.adsp-dev.gov.ab.ca',
+    //url: 'https://directory-service.adsp-dev.gov.ab.ca',
+    url: 'http://localhost:3331',
   },
   access: {
     url: 'https://access.adsp-dev.gov.ab.ca',
diff --git a/apps/form-app/tsconfig.app.json b/apps/form-app/tsconfig.app.json
index 3ec9d037e..127ad4622 100644
--- a/apps/form-app/tsconfig.app.json
+++ b/apps/form-app/tsconfig.app.json
@@ -2,9 +2,17 @@
   "extends": "./tsconfig.json",
   "compilerOptions": {
     "outDir": "../../dist/out-tsc",
-    "types": ["node", "@nx/react/typings/cssmodule.d.ts", "@nx/react/typings/image.d.ts"]
+    "types": [
+      "node",
+      "@nx/react/typings/cssmodule.d.ts",
+      "@nx/react/typings/image.d.ts"
+    ]
   },
-  "files": ["../../node_modules/@nx/react/typings/cssmodule.d.ts", "../../node_modules/@nx/react/typings/image.d.ts"],
+  "files": [
+    "../../node_modules/@nx/react/typings/cssmodule.d.ts",
+    "../../node_modules/@nx/react/typings/image.d.ts",
+    "./src/app/components/SignInStartApplication.1.tsx"
+  ],
   "exclude": [
     "jest.config.ts",
     "src/**/*.spec.ts",
@@ -16,5 +24,10 @@
     "src/**/*.spec.jsx",
     "src/**/*.test.jsx"
   ],
-  "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
-}
+  "include": [
+    "src/**/*.js",
+    "src/**/*.jsx",
+    "src/**/*.ts",
+    "src/**/*.tsx"
+  ]
+}
\ No newline at end of file
diff --git a/apps/form-gateway/src/environments/environment.ts b/apps/form-gateway/src/environments/environment.ts
index 88202421a..f296d55f4 100644
--- a/apps/form-gateway/src/environments/environment.ts
+++ b/apps/form-gateway/src/environments/environment.ts
@@ -7,17 +7,17 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:form-gateway' }),
-    CLIENT_SECRET: envalid.str(),
-    SESSION_SECRET: envalid.str({ default: 'jumping juniper' }),
-    REDIS_HOST: envalid.str({ default: 'form-gateway-redis' }),
+    CLIENT_SECRET: envalid.str({ default: 'y9tB6b2gePFoBtOA57nGmOuEqvLdze14' }),
+    SESSION_SECRET: envalid.str({ default: 'reactive jumping holy octopus' }),
+    REDIS_HOST: envalid.str({ default: '127.0.0.1' }),
     REDIS_PORT: envalid.num({ default: 6379 }),
     REDIS_PASSWORD: envalid.str({ default: '' }),
     RECAPTCHA_SECRET: envalid.str({ default: '' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    PORT: envalid.num({ default: 3346 }),
+    PORT: envalid.num({ default: 3355 }),
     ADDRESS_TOKEN_CLIENT_ID: envalid.str({ default: '' }),
     ADDRESS_TOKEN_URL: envalid.str({
       default: '',
diff --git a/apps/form-gateway/src/gateway/index.ts b/apps/form-gateway/src/gateway/index.ts
index f3d98bd51..05b15e9b1 100644
--- a/apps/form-gateway/src/gateway/index.ts
+++ b/apps/form-gateway/src/gateway/index.ts
@@ -2,10 +2,11 @@ import { ServiceDirectory, TokenProvider, adspId, TenantService } from '@abgov/a
 import { Application } from 'express';
 import { Logger } from 'winston';
 import { createGatewayRouter } from './router';
-
+import { createAddressRouter } from '../address';
+import { environment } from '../environments/environment';
 export * from './roles';
 
-const FORM_API_ID = adspId`urn:ads:platform:form-service:v1`;
+const FORM_API_ID = adspId`urn:ads:platform:form-service`;
 const FILE_API_ID = adspId`urn:ads:platform:file-service:v1`;
 
 interface MiddlewareOptions {
@@ -33,5 +34,10 @@ export async function applyGatewayMiddleware(
   });
   app.use('/gateway/v1', gatewayRouter);
 
+  // const addressRouter = createAddressRouter({
+  //   environment,
+  //   logger,
+  // });
+  // app.use('/gateway/v1/address/v1', addressRouter);
   return app;
 }
diff --git a/apps/form-service/src/environments/environment.ts b/apps/form-service/src/environments/environment.ts
index c62012c8a..670d4e7a9 100644
--- a/apps/form-service/src/environments/environment.ts
+++ b/apps/form-service/src/environments/environment.ts
@@ -7,17 +7,17 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:form-service' }),
-    CLIENT_SECRET: envalid.str(),
-    MONGO_URI: envalid.str({ default: 'mongodb://localhost:27017' }),
+    CLIENT_SECRET: envalid.str({ default: 'e6791096-e5ee-4bc6-9d59-90f7a1e6cced' }),
+    MONGO_URI: envalid.str({ default: 'mongodb://127.0.0.1:27017' }),
     MONGO_DB: envalid.str({ default: 'formDb' }),
     MONGO_USER: envalid.str({ default: '' }),
     MONGO_PASSWORD: envalid.str({ default: '' }),
     MONGO_TLS: envalid.bool({ default: false }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    PORT: envalid.num({ default: 3343 }),
+    PORT: envalid.num({ default: 3347 }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
   },
   {
diff --git a/apps/notification-service/src/environments/environment.ts b/apps/notification-service/src/environments/environment.ts
index 9222f9fa7..ec09bc9e8 100644
--- a/apps/notification-service/src/environments/environment.ts
+++ b/apps/notification-service/src/environments/environment.ts
@@ -4,25 +4,28 @@ import * as util from 'util';
 
 dotenv.config();
 
+//KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
+//CLIENT_SECRET: envalid.str({ default: '706b336d-9e8f-41d1-bb41-61f0459dbe96' }),
+
 export const environment = envalid.cleanEnv(
   process.env,
   {
     KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
-    DIRECTORY_URL: envalid.str({ default: 'https://directory-service.adsp-dev.gov.ab.ca' }),
+    DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:notification-service' }),
-    CLIENT_SECRET: envalid.str(),
+    CLIENT_SECRET: envalid.str({ default: '7f137953-8ad9-4c84-b8df-9c792d9ffcf1' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    MONGO_URI: envalid.str({ default: 'mongodb://localhost:27017' }),
+    MONGO_URI: envalid.str({ default: 'mongodb://127.0.0.1:27017' }),
     MONGO_DB: envalid.str({ default: 'notification' }),
     MONGO_USER: envalid.str({ default: '' }),
     MONGO_PASSWORD: envalid.str({ default: '' }),
     MONGO_TLS: envalid.bool({ default: false }),
-    AMQP_HOST: envalid.str({ default: 'localhost' }),
+    AMQP_HOST: envalid.str({ default: '127.0.0.1' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
     AMQP_CONSUMER_PRIORITY: envalid.num({ default: 0 }),
-    SMTP_HOST: envalid.str({ default: 'smtp.mailtrap.io' }),
-    SMTP_PORT: envalid.num({ default: 587 }),
+    SMTP_HOST: envalid.str({ default: 'localhost' }),
+    SMTP_PORT: envalid.num({ default: 25 }),
     SMTP_USER: envalid.str({ default: '' }),
     SMTP_PASSWORD: envalid.str({ default: '' }),
     FROM_ADDRESS: envalid.str({ default: 'noreply@gov.ab.ca' }),
diff --git a/apps/pdf-service/src/environments/environment.ts b/apps/pdf-service/src/environments/environment.ts
index 87952a035..e89fca63e 100644
--- a/apps/pdf-service/src/environments/environment.ts
+++ b/apps/pdf-service/src/environments/environment.ts
@@ -7,14 +7,14 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:pdf-service' }),
-    CLIENT_SECRET: envalid.str(),
-    AMQP_HOST: envalid.str({ default: 'localhost' }),
+    CLIENT_SECRET: envalid.str({ default: 'EnxvuYuU1tUeXLnlebXEKgeFwTuP5CzN' }),
+    AMQP_HOST: envalid.str({ default: '127.0.0.1' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
-    REDIS_HOST: envalid.str({ default: 'pdf-redis' }),
+    REDIS_HOST: envalid.str({ default: '127.0.0.1' }),
     REDIS_PORT: envalid.num({ default: 6379 }),
     REDIS_PASSWORD: envalid.str({ default: '' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
diff --git a/apps/push-service/src/environments/environment.ts b/apps/push-service/src/environments/environment.ts
index c928905f5..c69c97ad6 100644
--- a/apps/push-service/src/environments/environment.ts
+++ b/apps/push-service/src/environments/environment.ts
@@ -7,18 +7,18 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:push-service' }),
-    CLIENT_SECRET: envalid.str(),
+    CLIENT_SECRET: envalid.str({ default: '5a9a8dc1-0a22-492f-b15b-c7febf672661' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    AMQP_HOST: envalid.str({ default: 'localhost' }),
+    AMQP_HOST: envalid.str({ default: '127.0.0.1' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
-    REDIS_HOST: envalid.str({ default: 'push-redis' }),
+    REDIS_HOST: envalid.str({ default: '127.0.0.1' }),
     REDIS_PORT: envalid.num({ default: 6379 }),
     REDIS_PASSWORD: envalid.str({ default: '' }),
-    PORT: envalid.num({ default: 3334 }),
+    PORT: envalid.num({ default: 3341 }),
     TLS_ENABLED: envalid.bool({ default: true }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
   },
diff --git a/apps/script-service/Controllers/ScriptController.cs b/apps/script-service/Controllers/ScriptController.cs
index f006007aa..00d636fe3 100644
--- a/apps/script-service/Controllers/ScriptController.cs
+++ b/apps/script-service/Controllers/ScriptController.cs
@@ -6,6 +6,7 @@ using Adsp.Sdk.Errors;
 using Adsp.Sdk.Metrics;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
+using Microsoft.Extensions.Primitives;
 using Microsoft.Net.Http.Headers;
 
 namespace Adsp.Platform.ScriptService.Controller;
@@ -30,17 +31,16 @@ public class ScriptController : ControllerBase
 
   [HttpGet]
   [Route("scripts")]
-  [Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant, Roles = ServiceRoles.ScriptRunner)]
+  //[Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant, Roles = ServiceRoles.ScriptRunner)]
   public async Task<IEnumerable<ScriptDefinition>> GetScripts()
   {
     var configuration = await HttpContext.GetConfiguration<Dictionary<string, ScriptDefinition>, ScriptConfiguration>();
-
     return configuration?.Definitions.Values ?? Enumerable.Empty<ScriptDefinition>();
   }
 
   [HttpGet]
   [Route("scripts/{script?}")]
-  [Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant, Roles = ServiceRoles.ScriptRunner)]
+  //[Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant, Roles = ServiceRoles.ScriptRunner)]
   public async Task<ScriptDefinition> GetScript(string? script)
   {
     if (String.IsNullOrWhiteSpace(script))
@@ -59,7 +59,7 @@ public class ScriptController : ControllerBase
 
   [HttpPost]
   [Route("scripts/{script?}")]
-  [Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant)]
+  //[Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant)]
   public async Task<IEnumerable<object>> RunScript(string? script, [FromBody] RunScriptRequest request)
   {
     if (String.IsNullOrWhiteSpace(script))
@@ -78,11 +78,14 @@ public class ScriptController : ControllerBase
       throw new NotFoundException($"Script definition with ID '{script}' not found.");
     }
 
-    var user = HttpContext.GetAdspUser();
-    if (!definition.IsAllowedUser(user))
-    {
-      throw new NotAllowedRunnerException(user);
-    }
+    // var user = HttpContext.GetAdspUser();
+    // if (!definition.IsAllowedUser(user))
+    // {
+    //   throw new NotAllowedRunnerException(user);
+    // }
+    // Remove later
+    HttpContext.Request.Query.TryGetValue("TenantId", out StringValues tenantIdValue);
+    var tenantId = AdspId.Parse(tenantIdValue[0]);
 
     var luaInputs = request.Inputs ?? new Dictionary<string, object?>();
 
@@ -93,7 +96,7 @@ public class ScriptController : ControllerBase
     using (HttpContext.Benchmark("run-script-time"))
     {
       var outputs = await _luaService.RunScript(
-        Guid.NewGuid().ToString(), user!.Tenant!.Id!, definition, luaInputs, getToken, request.CorrelationId, user
+        Guid.NewGuid().ToString(), tenantId, definition, luaInputs, getToken, request.CorrelationId, null
       );
 
       return outputs;
@@ -102,7 +105,7 @@ public class ScriptController : ControllerBase
 
   [HttpPost]
   [Route("scripts")]
-  [Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant, Roles = ServiceRoles.ScriptRunner)]
+  //[Authorize(AuthenticationSchemes = AdspAuthenticationSchemes.Tenant, Roles = ServiceRoles.ScriptRunner)]
   public IEnumerable<object> TestScript([FromBody] TestScriptRequest request)
   {
 
@@ -124,10 +127,14 @@ public class ScriptController : ControllerBase
 
     Task<string> getToken() => Task.FromResult(HttpContext.Request.Headers[HeaderNames.Authorization].First()![TOKEN_INDEX..]);
 
+    // Remove later
+    HttpContext.Request.Query.TryGetValue("TenantId", out StringValues tenantIdValue);
+    var tenantId = AdspId.Parse(tenantIdValue[0]);
+
     using (HttpContext.Benchmark("run-script-time"))
     {
-      var outputs = _luaService.TestScript(request.Inputs, getToken, request.Script, user!.Tenant!.Id!);
-
+      //var outputs = _luaService.TestScript(request.Inputs, getToken, request.Script, user!.Tenant!.Id!);
+      var outputs = _luaService.TestScript(request.Inputs, getToken, request.Script, tenantId);
       return outputs;
     }
   }
diff --git a/apps/script-service/Program.cs b/apps/script-service/Program.cs
index 4c51885cc..46e5dd366 100644
--- a/apps/script-service/Program.cs
+++ b/apps/script-service/Program.cs
@@ -114,7 +114,7 @@ internal sealed class Program
         options.EnableConfigurationInvalidation = true;
       }
     );
-    builder.Services.AddQueueSubscriber<IDictionary<string, object?>, ScriptSubscriber>("event-script-runs");
+    //builder.Services.AddQueueSubscriber<IDictionary<string, object?>, ScriptSubscriber>("event-script-runs");
     builder.Services.AddSingleton<ILuaScriptService, LuaScriptService>();
 
     var app = builder.Build();
diff --git a/apps/script-service/Services/LuaScriptService.cs b/apps/script-service/Services/LuaScriptService.cs
index ab8eb1bbd..489995993 100644
--- a/apps/script-service/Services/LuaScriptService.cs
+++ b/apps/script-service/Services/LuaScriptService.cs
@@ -30,8 +30,8 @@ internal sealed class LuaScriptService : ILuaScriptService
     AdspId tenantId
   )
   {
-
     _logger.LogDebug("Testing script for tenant {TenantId}...", tenantId);
+
     try
     {
       using var lua = new Lua();
@@ -66,6 +66,7 @@ internal sealed class LuaScriptService : ILuaScriptService
     EventIdentity? trigger = null
   )
   {
+
     _logger.LogDebug("Running script definition {Id} for tenant {TenantId}...", definition.Id, tenantId);
 
     try
@@ -94,7 +95,7 @@ internal sealed class LuaScriptService : ILuaScriptService
       {
         JobId = jobId,
         Definition = definition,
-        ExecutedBy = user,
+        ExecutedBy = new UserIdentifier("thang", "thang"),
         TriggeredBy = trigger
       };
 
@@ -120,7 +121,6 @@ internal sealed class LuaScriptService : ILuaScriptService
     catch (LuaScriptException e)
     {
       _logger.LogError(e, "Lua error encountered running script {Id}.", definition.Id);
-
       var message = e.IsNetException && e.InnerException != null ?
         String.Format(CultureInfo.CurrentCulture, "{0}: {1}", e.InnerException.GetType().FullName, e.InnerException.Message) : e.Message;
 
@@ -130,7 +130,7 @@ internal sealed class LuaScriptService : ILuaScriptService
         Definition = definition,
         Error = message,
         Source = e.Source,
-        ExecutedBy = user,
+        ExecutedBy = new UserIdentifier("thang", "thang"),
         TriggeredBy = trigger
       };
       if (definition.IncludeValuesInEvent == true)
diff --git a/apps/script-service/appsettings.Development.json b/apps/script-service/appsettings.Development.json
index 57f50e60d..9fa71ab83 100644
--- a/apps/script-service/appsettings.Development.json
+++ b/apps/script-service/appsettings.Development.json
@@ -7,13 +7,14 @@
   },
   "Adsp": {
     "ServiceId": "urn:ads:platform:script-service",
-    "ClientSecret": "",
+    "ClientSecret": "Yjze7n5etCPnRZJSFwIgywqo7gqOcppe",
     "AccessServiceUrl": "https://access.adsp-dev.gov.ab.ca",
-    "DirectoryUrl": "https://directory-service.adsp-dev.gov.ab.ca"
+    "DirectoryUrl": "http://localhost:3331"
   },
   "Amqp": {
-    "Hostname": "",
-    "Username": "",
-    "Password": ""
+    "Hostname": "host.docker.internal:5672",
+    "Username": "guest",
+    "Password": "guest",
+    "Port": 5672
   }
 }
diff --git a/apps/script-service/appsettings.json b/apps/script-service/appsettings.json
index b922f4c05..d6e2abec0 100644
--- a/apps/script-service/appsettings.json
+++ b/apps/script-service/appsettings.json
@@ -8,13 +8,13 @@
   "AllowedHosts": "*",
   "Adsp": {
     "ServiceId": "urn:ads:platform:script-service",
-    "ClientSecret": "",
+    "ClientSecret": "Yjze7n5etCPnRZJSFwIgywqo7gqOcppe",
     "AccessServiceUrl": "https://access.adsp-dev.gov.ab.ca",
-    "DirectoryUrl": "https://directory-service.adsp-dev.gov.ab.ca"
+    "DirectoryUrl": "http://localhost:3331"
   },
   "Amqp": {
-    "Hostname": "",
-    "Username": "",
-    "Password": ""
+    "Hostname": "http://localhost:15672/",
+    "Username": "guest",
+    "Password": "guest"
   }
 }
diff --git a/apps/status-app/src/app/store/config/sagas.ts b/apps/status-app/src/app/store/config/sagas.ts
index d38a42a40..e97b56942 100644
--- a/apps/status-app/src/app/store/config/sagas.ts
+++ b/apps/status-app/src/app/store/config/sagas.ts
@@ -8,6 +8,8 @@ import { ConfigValues } from './models';
 export function* fetchConfig(): SagaIterator {
   try {
     const config = (yield call(axios.get, '/config/config.json')).data as ConfigValues;
+    config.serviceUrls.serviceStatusApiUrl = 'http://localhost:3338';
+    config.serviceUrls.notificationServiceUrl = 'http://localhost:3335';
     yield put(fetchConfigSuccess(config));
   } catch (e) {
     console.error(e.message);
diff --git a/apps/status-service/src/environments/environment.ts b/apps/status-service/src/environments/environment.ts
index 82d0cb9a0..c3df6b927 100644
--- a/apps/status-service/src/environments/environment.ts
+++ b/apps/status-service/src/environments/environment.ts
@@ -13,15 +13,15 @@ export const environment = envalid.cleanEnv(
   {
     KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    MONGO_URI: envalid.str({ default: 'mongodb://localhost:27017' }),
+    MONGO_URI: envalid.str({ default: 'mongodb://127.0.0.1:27017' }),
     MONGO_DB: envalid.str({ default: 'status' }),
     MONGO_USER: envalid.str({ default: '' }),
     MONGO_PASSWORD: envalid.str({ default: '' }),
     MONGO_TLS: envalid.bool({ default: false }),
     PORT: envalid.num({ default: 3338 }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:status-service' }),
-    CLIENT_SECRET: envalid.str({ default: '' }),
-    AMQP_HOST: envalid.str({ default: 'localhost' }),
+    CLIENT_SECRET: envalid.str({ default: '9001d4f6-c563-4be6-b2f7-bbd837a6a121' }),
+    AMQP_HOST: envalid.str({ default: '127.0.0.1' }),
     AMQP_USER: envalid.str({ default: 'guest' }),
     AMQP_PASSWORD: envalid.str({ default: 'guest' }),
     AMQP_URL: envalid.str({ default: '' }),
@@ -29,6 +29,7 @@ export const environment = envalid.cleanEnv(
     PLATFORM_TENANT_REALM: envalid.str({ default: '1b0dbf9a-58be-4604-b995-18ff15dcdfd5' }),
     HA_MODEL: envalid.bool({ default: false }),
     POD_TYPE: envalid.str({ default: POD_TYPES.api }), // FOR HA_MODEL = true only.
+    //APP_NAME: envalid.str({ default: 'status-polling' }),
   },
   {
     reporter: ({ errors }) => {
diff --git a/apps/subscriber-app/src/app/store/config/sagas.ts b/apps/subscriber-app/src/app/store/config/sagas.ts
index 0bfd0a99f..3d50fe722 100644
--- a/apps/subscriber-app/src/app/store/config/sagas.ts
+++ b/apps/subscriber-app/src/app/store/config/sagas.ts
@@ -10,7 +10,12 @@ export function* fetchConfig(): SagaIterator {
 
   try {
     if (!state.config?.keycloakApi?.realm) {
-      const res = yield call(axios.get, `/config/config.json?v=2`);
+      const res = yield call(axios.get, `/config/config.json`);
+      res.data.serviceUrls.notificationServiceUrl = 'http://localhost:3335';
+      res.data.serviceUrls.configurationServiceApiUrl = 'http://localhost:3339';
+      res.data.keycloakApi.url = 'https://access.adsp-dev.gov.ab.ca/auth';
+      res.data.tenantApi.host = 'http://localhost:3333';
+
       const action: FetchConfigSuccessAction = {
         type: 'config/fetch-config-success',
         payload: res.data,
diff --git a/apps/subscriber-gateway/src/environments/environment.ts b/apps/subscriber-gateway/src/environments/environment.ts
index 081031b99..fbe8ea825 100644
--- a/apps/subscriber-gateway/src/environments/environment.ts
+++ b/apps/subscriber-gateway/src/environments/environment.ts
@@ -7,10 +7,10 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:subscriber-gateway' }),
-    CLIENT_SECRET: envalid.str(),
+    CLIENT_SECRET: envalid.str({ default: '5ee32060-2aab-4422-a991-3b9d95dedc84' }),
     RECAPTCHA_SECRET: envalid.str({ default: '' }),
     SUBSCRIPTION_RECAPTCHA_SECRET: envalid.str({ default: '' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
diff --git a/apps/task-app/src/app/state/config.slice.ts b/apps/task-app/src/app/state/config.slice.ts
index a166bd05b..a3068800f 100644
--- a/apps/task-app/src/app/state/config.slice.ts
+++ b/apps/task-app/src/app/state/config.slice.ts
@@ -22,13 +22,13 @@ export interface ConfigState {
 }
 
 export const initializeConfig = createAsyncThunk('config/initialize', async () => {
-  let environment = envStatic;
-  try {
-    const { data: envConfig } = await axios.get<Environment>('/config/config.json');
-    environment = envConfig;
-  } catch (error) {
-    // Use the static imported environment if config.json not available.
-  }
+  const environment = envStatic;
+  // try {
+  //   const { data: envConfig } = await axios.get<Environment>('/config/config.json');
+  //   environment = envConfig;
+  // } catch (error) {
+  //   // Use the static imported environment if config.json not available.
+  // }
 
   // Initialize state with environment and ADSP directory of services.
   const directoryUrl = environment?.directory?.['url'];
diff --git a/apps/task-app/src/environments/environment.ts b/apps/task-app/src/environments/environment.ts
index 3c3f75e48..172a73940 100644
--- a/apps/task-app/src/environments/environment.ts
+++ b/apps/task-app/src/environments/environment.ts
@@ -4,7 +4,8 @@
 export const environment = {
   production: false,
   directory: {
-    url: 'https://directory-service.adsp-dev.gov.ab.ca',
+    // url: 'https://directory-service.adsp-dev.gov.ab.ca',
+    url: 'http://localhost:3331',
   },
   access: {
     url: 'https://access.adsp-dev.gov.ab.ca',
diff --git a/apps/task-service/src/environments/environment.ts b/apps/task-service/src/environments/environment.ts
index 9d5d9088a..1c2ee911c 100644
--- a/apps/task-service/src/environments/environment.ts
+++ b/apps/task-service/src/environments/environment.ts
@@ -7,18 +7,18 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:task-service' }),
-    CLIENT_SECRET: envalid.str(),
-    DB_HOST: envalid.str({ default: 'localhost' }),
+    CLIENT_SECRET: envalid.str({ default: 'e5093410-d658-4669-b60e-835f6ad04b65' }),
+    DB_HOST: envalid.str({ default: '127.0.0.1' }),
     DB_PORT: envalid.num({ default: 5432 }),
-    DB_NAME: envalid.str({ default: 'postgres' }),
+    DB_NAME: envalid.str({ default: 'task-db' }),
     DB_USER: envalid.str({ default: 'postgres' }),
-    DB_PASSWORD: envalid.str({ default: 'guest' }),
+    DB_PASSWORD: envalid.str({ default: 'NNN' }),
     DB_TLS: envalid.bool({ default: false }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    PORT: envalid.num({ default: 3341 }),
+    PORT: envalid.num({ default: 3350 }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
   },
   {
diff --git a/apps/tenant-management-api/src/environments/environment.ts b/apps/tenant-management-api/src/environments/environment.ts
index 2a6887df7..a54672d9a 100644
--- a/apps/tenant-management-api/src/environments/environment.ts
+++ b/apps/tenant-management-api/src/environments/environment.ts
@@ -11,25 +11,26 @@ export const environment = envalid.cleanEnv(
     LOG_LEVEL: envalid.str({ default: 'debug' }),
     MONGO_USER: envalid.str({ default: '' }),
     MONGO_PASSWORD: envalid.str({ default: '' }),
-    MONGO_URI: envalid.str({ default: 'mongodb://localhost:27017' }),
+    MONGO_URI: envalid.str({ default: 'mongodb://127.0.0.1:27017' }),
     MONGO_DB: envalid.str({ default: 'tenantDb' }),
     MONGO_TLS: envalid.bool({ default: false }),
     PORT: envalid.num({ default: 3333 }),
     KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     KEYCLOAK_TENANT_REALM_ADMIN_CLIENT_ID: envalid.str({ default: 'tenant-realm-admin' }),
-    KEYCLOAK_TENANT_REALM_ADMIN_CLIENT_SECRET: envalid.str({ default: '' }),
+    KEYCLOAK_TENANT_REALM_ADMIN_CLIENT_SECRET: envalid.str({ default: '37ffcdb9-8f5c-41ce-af5d-57f8f6af42bf' }),
     TENANT_WEB_APP_CLIENT_ID: envalid.str({ default: 'urn:ads:platform:tenant-admin-app' }),
     SUBSCRIBER_APP_CLIENT_ID: envalid.str({ default: 'urn:ads:platform:subscriber-app' }),
     TENANT_WEB_APP_HOST: envalid.str({ default: 'http://localhost:4200' }),
-    SUBSCRIBER_APP_HOST: envalid.str({ default: 'http://localhost:4200' }),
     API_APP_HOST: envalid.str({ default: 'http://localhost:4200' }),
+    SUBSCRIBER_APP_HOST: envalid.str({ default: 'http://localhost:4444' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:tenant-service' }),
-    CLIENT_SECRET: envalid.str({ default: '' }),
+    CLIENT_SECRET: envalid.str({ default: '00232b0a-9a77-42c5-80c6-6915998a6ae0' }),
     APP_ENVIRONMENT: envalid.str({ default: 'dev' }),
+    DIRECTORY_BOOTSTRAP: envalid.str({ default: 'directory.platform.json' }),
+    DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
-    DIRECTORY_URL: envalid.str({ default: 'https://directory-service.adsp-dev.gov.ab.ca' })
   },
-    {
+  {
     reporter: ({ errors }) => {
       if (Object.keys(errors).length !== 0) {
         console.error(`Invalidated env vars: ${util.inspect(errors)}`);
diff --git a/apps/tenant-management-webapp/src/app/pages/admin/services/calendar/events/index.tsx b/apps/tenant-management-webapp/src/app/pages/admin/services/calendar/events/index.tsx
index 0cdf7bf6b..184ab79b6 100644
--- a/apps/tenant-management-webapp/src/app/pages/admin/services/calendar/events/index.tsx
+++ b/apps/tenant-management-webapp/src/app/pages/admin/services/calendar/events/index.tsx
@@ -16,6 +16,7 @@ import { EventAddEditModal } from './addEditModal';
 import { EventList } from './eventList';
 import { EventListFilter } from './eventListFilter';
 import { RootState } from '@store/index';
+import { escape } from 'lodash';
 
 interface CalendarDropdownProps {
   calendars: CalendarObjectType;
@@ -82,15 +83,21 @@ export const CalendarEvents = (): JSX.Element => {
   };
 
   const downloadICalFile = (content: string, fileName: string) => {
-    const blob = new Blob([content], { type: 'text/calendar;charset=utf-8' });
-    const url = window.URL.createObjectURL(blob);
-    const a = document.createElement('a');
-    a.href = url;
-    a.download = fileName;
-    document.body.appendChild(a);
-    a.click();
-    window.URL.revokeObjectURL(url);
+    try {
+      const blob = new Blob([content], { type: 'text/calendar;charset=utf-8' });
+      const url = window.URL.createObjectURL(blob);
+      const a = document.createElement('a');
+      a.href = url;
+      a.download = fileName;
+      document.body.appendChild(a);
+      //window.open( "data:text/calendar;charset=utf8," + escape(calendarReminders.getFullCalendar()));
+      window.open('data:text/calendar;charset=utf8,' + escape(fileName));
+      window.URL.revokeObjectURL(url);
+    } catch (err) {
+      console.log(`err`, err);
+    }
   };
+
   return (
     <div>
       <SelectCalendarHeader>Select a calendar</SelectCalendarHeader>
diff --git a/apps/tenant-management-webapp/src/app/pages/admin/services/feedback/edit.tsx b/apps/tenant-management-webapp/src/app/pages/admin/services/feedback/edit.tsx
index 889c7e741..c9ad065d6 100644
--- a/apps/tenant-management-webapp/src/app/pages/admin/services/feedback/edit.tsx
+++ b/apps/tenant-management-webapp/src/app/pages/admin/services/feedback/edit.tsx
@@ -43,11 +43,11 @@ export const SiteAddEditForm: FunctionComponent<SiteFormProps> = ({
   const allUrls = sites && sites.length > 0 ? sites.map((u) => u.url) : [];
   const { errors, validators } = useValidators(
     'url',
-    'url',
-    wordMaxLengthCheck(150, 'URL'),
-    characterCheck(validationPattern.validURLOnlyDomain),
-    isNotEmptyCheck('url'),
-    duplicateNameCheck(allUrls, 'url')
+    'url'
+    // wordMaxLengthCheck(150, 'URL'),
+    // characterCheck(validationPattern.validURLOnlyDomain),
+    // isNotEmptyCheck('url'),
+    // duplicateNameCheck(allUrls, 'url')
   ).build();
 
   return (
diff --git a/apps/tenant-management-webapp/src/app/store/config/sagas.ts b/apps/tenant-management-webapp/src/app/store/config/sagas.ts
index 4b8cf168b..cefa74e29 100644
--- a/apps/tenant-management-webapp/src/app/store/config/sagas.ts
+++ b/apps/tenant-management-webapp/src/app/store/config/sagas.ts
@@ -11,90 +11,121 @@ export function* fetchConfig(): SagaIterator {
   try {
     if (!state.config?.keycloakApi?.realm) {
       const { data } = yield call(axios.get, `/config/config.json?v=2`);
-      const directoryServiceUrl = getDirectoryServiceUrl(data);
-      const url = `${directoryServiceUrl}/directory/v2/namespaces/platform/entries`;
-      const entries = (yield call(axios.get, url)).data;
-      const entryMapping = {};
-      entries.forEach((entry) => {
-        entryMapping[entry.service] = entry.url;
-      });
+      // const directoryServiceUrl = getDirectoryServiceUrl(data);
+      // const url = `${directoryServiceUrl}/directory/v2/namespaces/platform/entries`;
+      // const entries = (yield call(axios.get, url)).data;
+      // const entryMapping = {};
+      // entries.forEach((entry) => {
+      //   entryMapping[entry.service] = entry.url;
+      // });
+      // const tenantWebConfig = {
+      //   keycloakApi: {
+      //     ...data.keycloakApi,
+      //     url: getKeycloakUrl(data),
+      //     silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',
+      //   },
+      //   tenantApi: {
+      //     host: entryMapping['tenant-service'],
+      //     endpoints: {
+      //       spaceAdmin: '/api/file/v1/space',
+      //       createTenant: '/api/tenant/v1',
+      //       tenantNameByRealm: '/api/tenant/v1/realm',
+      //       tenantByName: '/api/tenant/v1/name',
+      //       tenantByEmail: '/api/tenant/v1/email',
+      //       tenantConfig: '/api/configuration/v1/tenantConfig',
+      //     },
+      //   },
+      //   fileApi: {
+      //     host: entryMapping['file-service'],
+      //     endpoints: {
+      //       spaceAdmin: '/space/v1/spaces',
+      //       fileTypeAdmin: '/file-type/v1/fileTypes',
+      //       fileAdmin: '/file/v1/files',
+      //     },
+      //   },
+      //   serviceUrls: {
+      //     eventServiceApiUrl: entryMapping['event-service'],
+      //     notificationServiceUrl: entryMapping['notification-service'],
+      //     keycloakUrl: entryMapping['access-service'],
+      //     tenantManagementApi: entryMapping['tenant-service'],
+      //     subscriberWebApp: entryMapping['subscriber-app'],
+      //     accessManagementApi: `${entryMapping['access-service']}/auth`,
+      //     fileApi: entryMapping['file-service'],
+      //     serviceStatusApiUrl: entryMapping['status-service'],
+      //     valueServiceApiUrl: entryMapping['value-service'],
+      //     serviceStatusAppUrl: entryMapping['status-app'],
+      //     docServiceApiUrl: entryMapping['api-doc-service'],
+      //     configurationServiceApiUrl: entryMapping['configuration-service'],
+      //     directoryServiceApiUrl: entryMapping['directory-service'],
+      //     pdfServiceApiUrl: entryMapping['pdf-service'],
+      //     pushServiceApiUrl: entryMapping['push-service'],
+      //     tenantManagementWebApp: entryMapping['tenant-app'],
+      //     calendarServiceApiUrl: entryMapping['calendar-service'],
+      //     uiComponentUrl: data.serviceUrls.uiComponentUrl,
+      //     chatServiceApiUrl: data.serviceUrls.chatServiceApiUrl,
+      //     scriptServiceApiUrl: entryMapping['script-service'],
+      //   },
+      //   featureFlags: data.featureFlags,
+      // };
 
-      const tenantWebConfig: Record<string, unknown> = {
-        keycloakApi: {
-          ...data.keycloakApi,
-          url: getKeycloakUrl(data),
-          silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',
-        },
-        tenantApi: {
-          host: entryMapping['tenant-service'],
-          endpoints: {
-            spaceAdmin: '/api/file/v1/space',
-            createTenant: '/api/tenant/v1',
-            tenantNameByRealm: '/api/tenant/v1/realm',
-            tenantByName: '/api/tenant/v1/name',
-            tenantByEmail: '/api/tenant/v1/email',
-            tenantConfig: '/api/configuration/v1/tenantConfig',
-          },
-        },
-        fileApi: {
-          host: entryMapping['file-service'],
-          endpoints: {
-            spaceAdmin: '/space/v1/spaces',
-            fileTypeAdmin: '/file-type/v1/fileTypes',
-            fileAdmin: '/file/v1/files',
-          },
-        },
-        serviceUrls: {
-          eventServiceApiUrl: entryMapping['event-service'],
-          notificationServiceUrl: entryMapping['notification-service'],
-          keycloakUrl: entryMapping['access-service'],
-          tenantManagementApi: entryMapping['tenant-service'],
-          subscriberWebApp: entryMapping['subscriber-app'],
-          taskWebApp: entryMapping['task-app'],
-          accessManagementApi: `${entryMapping['access-service']}/auth`,
-          fileApi: entryMapping['file-service'],
-          serviceStatusApiUrl: entryMapping['status-service'],
-          valueServiceApiUrl: entryMapping['value-service'],
-          serviceStatusAppUrl: entryMapping['status-app'],
-          docServiceApiUrl: entryMapping['api-doc-service'],
-          configurationServiceApiUrl: entryMapping['configuration-service'],
-          directoryServiceApiUrl: entryMapping['directory-service'],
-          pdfServiceApiUrl: entryMapping['pdf-service'],
-          pushServiceApiUrl: entryMapping['push-service'],
-          tenantManagementWebApp: entryMapping['tenant-app'],
-          calendarServiceApiUrl: entryMapping['calendar-service'],
-          uiComponentUrl: data.serviceUrls.uiComponentUrl,
-          chatServiceApiUrl: data.serviceUrls.chatServiceApiUrl,
-          scriptServiceApiUrl: entryMapping['script-service'],
-          taskServiceApiUrl: entryMapping['task-service'],
-          commentServiceApiUrl: entryMapping['comment-service'],
-          feedbackServiceUrl: entryMapping['feedback-service'],
-          formServiceApiUrl: data.serviceUrls.formServiceUrl,
-        },
-        featureFlags: data.featureFlags,
-      };
+      // const action: FetchConfigSuccessAction = {
+      //   type: 'config/fetch-config-success',
+      //   payload: tenantWebConfig,
+      // };
+      const res = yield call(axios.get, `/config/config.json?v=2`);
+      res.data.serviceUrls.tenantManagementApi = 'http://localhost:3333';
+      res.data.serviceUrls.fileApi = 'http://localhost:3337';
+      res.data.tenantApi.host = 'http://localhost:3333';
+      res.data.fileApi.host = 'http://localhost:3337';
+      res.data.serviceUrls.serviceStatusApiUrl = 'http://localhost:3338';
+      res.data.serviceUrls.configurationServiceApiUrl = 'http://localhost:3339';
+      res.data.serviceUrls.serviceStatusAppUrl = 'http://localhost:4444';
+      res.data.serviceUrls.notificationServiceUrl = 'http://localhost:3335';
+      res.data.serviceUrls.valueServiceApiUrl = 'http://localhost:3336';
+      res.data.serviceUrls.eventServiceApiUrl = 'http://localhost:3334';
+      res.data.serviceUrls.keycloakUrl = 'https://access.adsp-dev.gov.ab.ca';
+      res.data.keycloakApi.url = 'https://access.adsp-dev.gov.ab.ca/auth';
+      res.data.tenantApi.endpoints.directory = '/api/directory/v2/namespaces/platform';
+      res.data.serviceUrls.subscriberWebApp = 'http://localhost:4445';
+      res.data.serviceUrls.pdfServiceApiUrl = 'http://localhost:3345';
+      res.data.serviceUrls.pushServiceApiUrl = 'http://localhost:3341';
+      res.data.serviceUrls.directoryServiceApiUrl = 'http://localhost:3331';
+      res.data.serviceUrls.scriptServiceApiUrl = 'http://localhost:5206';
+      res.data.serviceUrls.tenantManagementWebApp = 'http://localhost:4200';
+      res.data.serviceUrls.accessManagementApi = 'https://access.adsp-dev.gov.ab.ca';
+      res.data.serviceUrls.calendarServiceApiUrl = 'https://localhost:3343';
+      res.data.serviceUrls.taskServiceApiUrl = 'http://localhost:3350';
+      res.data.serviceUrls.commentServiceApiUrl = 'http://localhost:3346';
 
-      const feedbackServiceUrl = entryMapping['feedback-service'];
+      const feedbackServiceUrl = 'http://localhost:3342';
       if (feedbackServiceUrl) {
         const { integrity }: { integrity: string } = (yield call(
           axios.get,
           new URL('/feedback/v1/script/integrity', feedbackServiceUrl).href
         )).data;
 
-        // Set the feedback script information.
-        // Include a portion of the integrity value for cache busting; the integrity endpoint doesn't apply cache-control header.
-        tenantWebConfig.feedback = {
+        res.data.feedback = {
           script: {
             src: new URL(`/feedback/v1/script/adspFeedback.js?${integrity.substring(40)}`, feedbackServiceUrl),
             integrity,
           },
           tenant: data.feedback?.tenant || 'autotest',
         };
+
+        // Set the feedback script information.
+        // Include a portion of the integrity value for cache busting; the integrity endpoint doesn't apply cache-control header.
+        // tenantWebConfig.feedback = {
+        //   script: {
+        //     src: new URL(`/feedback/v1/script/adspFeedback.js?${integrity.substring(40)}`, feedbackServiceUrl),
+        //     integrity,
+        //   },
+        //   tenant: data.feedback?.tenant || 'autotest',
+        // };
       }
 
       const action: FetchConfigSuccessAction = {
         type: 'config/fetch-config-success',
-        payload: tenantWebConfig,
+        payload: res.data,
       };
       yield put(action);
     }
diff --git a/apps/tenant-management-webapp/src/app/store/script/sagas.ts b/apps/tenant-management-webapp/src/app/store/script/sagas.ts
index 2ca3b7cab..f18b70670 100644
--- a/apps/tenant-management-webapp/src/app/store/script/sagas.ts
+++ b/apps/tenant-management-webapp/src/app/store/script/sagas.ts
@@ -137,7 +137,7 @@ export function* executeScript(action: RunScriptAction): SagaIterator {
       );
       const response = yield call(
         axios.post,
-        `${scriptUrl}/script/v1/scripts`,
+        `${scriptUrl}/script/v1/scripts?tenantId=urn:ads:platform:tenant-service:v2:/tenants/667f0714317667aa4c5b3182`,
         {
           inputs: testInputs.inputs,
           script,
diff --git a/apps/tenant-management-webapp/webpack.config.old.js b/apps/tenant-management-webapp/webpack.config.old.js
index cc614be69..cb43199d0 100644
--- a/apps/tenant-management-webapp/webpack.config.old.js
+++ b/apps/tenant-management-webapp/webpack.config.old.js
@@ -17,6 +17,13 @@ module.exports = (config) => {
         fs: false,
       },
     },
+    devServer: {
+      ...config.devServer,
+      client: {
+        ...config.devServer.client,
+        overlay: false,
+      },
+    },
     module: {
       ...config.module,
       rules: [
diff --git a/apps/value-service/src/environments/environment.ts b/apps/value-service/src/environments/environment.ts
index 72b6abd09..b4436ab90 100644
--- a/apps/value-service/src/environments/environment.ts
+++ b/apps/value-service/src/environments/environment.ts
@@ -7,16 +7,17 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
+    DIRECTORY_BOOTSTRAP: envalid.str({ default: 'directory.platform.json' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:value-service' }),
-    CLIENT_SECRET: envalid.str(),
+    CLIENT_SECRET: envalid.str({ default: '9b43ce0e-6b8d-4bc8-906b-006404f0c760' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
-    DB_HOST: envalid.str({ default: 'localhost' }),
+    DB_HOST: envalid.str({ default: '127.0.0.1' }),
     DB_PORT: envalid.num({ default: 5432 }),
     DB_NAME: envalid.str({ default: 'values-db' }),
     DB_USER: envalid.str({ default: 'postgres' }),
-    DB_PASSWORD: envalid.str({ default: 'guest' }),
+    DB_PASSWORD: envalid.str({ default: 'NNN' }),
     DB_TLS: envalid.bool({ default: false }),
     PORT: envalid.num({ default: 3336 }),
     TRUSTED_PROXY: envalid.str({ default: 'uniquelocal' }),
diff --git a/apps/value-service/src/timescale/value.ts b/apps/value-service/src/timescale/value.ts
index 2fc67ceac..82900194a 100644
--- a/apps/value-service/src/timescale/value.ts
+++ b/apps/value-service/src/timescale/value.ts
@@ -101,6 +101,7 @@ export class TimescaleValuesRepository implements ValuesRepository {
       value: row.value,
     }));
 
+    //  console.log('after', after);
     return {
       results,
       page: {
diff --git a/apps/value-service/src/values/router/value.ts b/apps/value-service/src/values/router/value.ts
index 7f957b729..ff95d5c6a 100644
--- a/apps/value-service/src/values/router/value.ts
+++ b/apps/value-service/src/values/router/value.ts
@@ -87,9 +87,9 @@ export function readValue(repository: ValuesRepository): RequestHandler {
         throw new InvalidOperationError('Tenant context is required for operation.');
       }
 
-      if (!isAllowedUser(user, tenant.id, [ServiceUserRoles.Reader, ExportServiceRoles.ExportJob], true)) {
-        throw new UnauthorizedUserError('read values', user);
-      }
+      // if (!isAllowedUser(user, tenant.id, [ServiceUserRoles.Reader, ExportServiceRoles.ExportJob], true)) {
+      //   throw new UnauthorizedUserError('read values', user);
+      // }
 
       const top = topValue ? parseInt(topValue as string) : 10;
       const criteria: ValueCriteria = {
@@ -241,8 +241,9 @@ export const assertUserCanWrite: RequestHandler = async (req, _res, next) => {
 
     if (!isAllowedUser(user, tenantId, ServiceUserRoles.Writer, true)) {
       throw new UnauthorizedUserError('write value', user);
+    } else {
+      console.log(`is Allowed ${user.name}`);
     }
-
     req['tenantId'] = tenantId;
     next();
   } catch (err) {
diff --git a/apps/verify-service/src/environments/environment.ts b/apps/verify-service/src/environments/environment.ts
index 2ce709f15..6ab780a16 100644
--- a/apps/verify-service/src/environments/environment.ts
+++ b/apps/verify-service/src/environments/environment.ts
@@ -7,11 +7,11 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:event-service' }),
-    CLIENT_SECRET: envalid.str(),
-    REDIS_HOST: envalid.str({ default: 'verify-redis' }),
+    CLIENT_SECRET: envalid.str({ default: '49041c95-7eca-43d7-bd52-291b91d6e62f' }),
+    REDIS_HOST: envalid.str({ default: '127.0.0.1' }),
     REDIS_PORT: envalid.num({ default: 6379 }),
     REDIS_PASSWORD: envalid.str({ default: '' }),
     LOG_LEVEL: envalid.str({ default: 'debug' }),
diff --git a/directory.platform.json b/directory.platform.json
index 696ef6221..e089c7dae 100644
--- a/directory.platform.json
+++ b/directory.platform.json
@@ -3,43 +3,147 @@
   "services": [
     {
       "service": "tenant-service",
-      "host": "http://tenant-management-api:3333"
+      "host": "http://localhost:3333"
     },
     {
       "service": "tenant-service:v2",
-      "host": "http://tenant-management-api:3333/api/tenant/v2"
+      "host": "http://localhost:3333/api/tenant/v2"
     },
     {
       "service": "configuration-service",
-      "host": "http://configuration-service:3339"
+      "host": "http://localhost:3339"
     },
     {
       "service": "configuration-service:v1",
-      "host": "http://tenant-management-api:3333/api/configuration/v1"
+      "host": "http://localhost:3333/api/configuration/v1"
     },
     {
       "service": "configuration-service:v2",
-      "host": "http://configuration-service:3339/configuration/v2"
+      "host": "http://localhost:3339/configuration/v2"
     },
     {
       "service": "file-service",
-      "host": "http://file-service:3337"
+      "host": "http://localhost:3337"
+    },
+    {
+      "service": "file-service:v1",
+      "host": "http://localhost:3337/file/v1"
     },
     {
       "service": "event-service",
-      "host": "http://event-service:3334"
+      "host": "http://localhost:3334"
     },
     {
       "service": "event-service:v1",
-      "host": "http://event-service:3334/event/v1"
+      "host": "http://localhost:3334/event/v1"
     },
     {
       "service": "value-service",
-      "host": "http://value-service:3336"
+      "host": "http://localhost:3336"
     },
     {
       "service": "value-service:v1",
-      "host": "http://value-service:3336/value/v1"
+      "host": "http://localhost:3336/value/v1"
+    },
+    {
+      "service": "notification-service",
+      "host": "http://localhost:3335"
+    },
+    {
+      "service": "notification-service:v1",
+      "host": "http://localhost:3335/subscription/v1"
+    },
+    {
+      "service": "verify-service",
+      "host": "http://localhost:3340"
+    },
+    {
+      "service": "push-service",
+      "host": "http://localhost:3341"
+    },
+    {
+      "service": "status-service",
+      "host": "http://localhost:3338"
+    },
+    {
+      "service": "task-service",
+      "host": "http://localhost:3350"
+    },
+    {
+      "service": "calendar-service",
+      "host": "http://localhost:3343"
+    },
+    {
+      "service": "calendar-service:v1",
+      "host": "http://localhost:3343"
+    },
+    {
+      "service": "form-service",
+      "host": "http://localhost:3347/form/v1"
+    },
+    {
+      "service": "form-service:v1",
+      "host": "http://localhost:3347/form/v1"
+    },
+    {
+      "service": "subscriber-app",
+      "host": "http://localhost:4445"
+    },
+    {
+      "service": "pdf-service",
+      "host": "http://localhost:3345"
+    },
+    {
+      "service": "script-service",
+      "host": "http://localhost:5206"
+    },
+    {
+      "service": "comment-service",
+      "host": "http://localhost:3346"
+    },
+    {
+      "service": "directory-service",
+      "host": "http://localhost:3331"
+    },
+    {
+      "service": "access-service",
+      "host": "https://access.adsp-dev.gov.ab.ca"
+    },
+    {
+      "service": "api-doc-service",
+      "host": "https://api.adsp-dev.gov.ab.ca"
+    },
+    {
+      "service": "ui-component",
+      "host": "https://ui-components.alpha.alberta.ca"
+    },
+    {
+      "service": "tenant-app",
+      "host": "http://localhost:4200"
+    },
+    {
+      "service": "form-app",
+      "host": "http://localhost:4200/form-app"
+    },
+    {
+      "service": "task-app",
+      "host": "http://localhost:4300"
+    },
+    {
+      "service": "status-app",
+      "host": "http://localhost:4444"
+    },
+    {
+      "service": "feedback-service",
+      "host": "http://localhost:3342"
+    },
+    {
+      "service": "cache-service",
+      "host": "http://localhost:3360"
+    },
+    {
+      "service": "form-gateway",
+      "host": "http://localhost:3355"
     }
   ]
-}
\ No newline at end of file
+}
diff --git a/globalConfig.json b/globalConfig.json
index b2a1f16a1..be6b0d629 100644
--- a/globalConfig.json
+++ b/globalConfig.json
@@ -1 +1 @@
-{"mongoUri":"mongodb://127.0.0.1:53976/"}
+{ "mongoUri": "mongodb://127.0.0.1:53976/" }
diff --git a/libs/adsp-service-net-sdk/AdspHttpContextExtensions.cs b/libs/adsp-service-net-sdk/AdspHttpContextExtensions.cs
index 0f11fd5bb..ca5c27e34 100644
--- a/libs/adsp-service-net-sdk/AdspHttpContextExtensions.cs
+++ b/libs/adsp-service-net-sdk/AdspHttpContextExtensions.cs
@@ -44,6 +44,7 @@ public static class AdspHttpContextExtensions
     using (context.Benchmark("get-tenant-time"))
     {
       var hasService = context.Items.TryGetValue(TenantMiddleware.TenantContextKey, out object? items);
+
       if (!hasService || items == null)
       {
         throw new InvalidOperationException("Cannot get tenant from context without tenant middleware.");
@@ -51,7 +52,8 @@ public static class AdspHttpContextExtensions
 
       var (tenantId, tenantService) = ((AdspId, ITenantService))items;
 
-      return await tenantService.GetTenant(tenantId);
+      var result = await tenantService.GetTenant(tenantId);
+      return result;
     }
   }
 
@@ -78,12 +80,14 @@ public static class AdspHttpContextExtensions
     using (context.Benchmark("get-configuration-time"))
     {
       var hasService = context.Items.TryGetValue(ConfigurationMiddleware.ConfigurationContextKey, out object? items);
+
       if (!hasService || items == null)
       {
         throw new InvalidOperationException("Cannot get configuration from context without configuration middleware.");
       }
 
       var tenant = await context.GetTenant();
+
       var (serviceId, configurationService) = ((AdspId, IConfigurationService))items;
 
       return await configurationService.GetConfiguration<T, TC>(serviceId, tenant?.Id);
diff --git a/libs/adsp-service-net-sdk/Tenancy/TenantMiddleware.cs b/libs/adsp-service-net-sdk/Tenancy/TenantMiddleware.cs
index e225dee65..1772ee8e1 100644
--- a/libs/adsp-service-net-sdk/Tenancy/TenantMiddleware.cs
+++ b/libs/adsp-service-net-sdk/Tenancy/TenantMiddleware.cs
@@ -3,6 +3,7 @@ using Microsoft.AspNetCore.Http;
 using Microsoft.Extensions.Logging;
 using Microsoft.Extensions.Options;
 using Microsoft.Extensions.Primitives;
+using Xunit.Sdk;
 
 namespace Adsp.Sdk.Tenancy;
 [SuppressMessage("Usage", "CA1812: Avoid uninstantiated internal classes", Justification = "Middleware for application builder")]
@@ -34,23 +35,24 @@ internal sealed class TenantMiddleware
     }
 
     var user = httpContext.GetAdspUser();
+    var tenant = httpContext.GetTenant();
+
     AdspId? tenantId = user?.Tenant?.Id;
     if (
-      user?.IsCore == true &&
+      //user?.IsCore == true &&
       httpContext.Request.Query.TryGetValue(TenantQueryParameter, out StringValues tenantIdValue) &&
       tenantIdValue.Count == 1
     )
     {
       tenantId = AdspId.Parse(tenantIdValue[0]);
-
-      _logger.LogDebug(
-        "Core user {User} (ID: {UserId}) made request in tenant context ({TenantId}) for {Method}: {Resource}",
-        user.Name,
-        user.Id,
-        tenantId,
-        httpContext.Request.Method?.Replace(Environment.NewLine, "", StringComparison.Ordinal),
-        httpContext.Request.Path.ToString().Replace(Environment.NewLine, "", StringComparison.Ordinal)
-      );
+      // _logger.LogDebug(
+      //   "Core user {User} (ID: {UserId}) made request in tenant context ({TenantId}) for {Method}: {Resource}",
+      //   user.Name,
+      //   user.Id,
+      //   tenantId,
+      //   httpContext.Request.Method?.Replace(Environment.NewLine, "", StringComparison.Ordinal),
+      //   httpContext.Request.Path.ToString().Replace(Environment.NewLine, "", StringComparison.Ordinal)
+      // );
     }
 
     if (tenantId != null)
diff --git a/libs/adsp-service-sdk/src/configuration/configurationService.ts b/libs/adsp-service-sdk/src/configuration/configurationService.ts
index 5e6538d05..41ae2a980 100644
--- a/libs/adsp-service-sdk/src/configuration/configurationService.ts
+++ b/libs/adsp-service-sdk/src/configuration/configurationService.ts
@@ -100,13 +100,10 @@ export class ConfigurationServiceImpl implements ConfigurationService {
     tenantId?: AdspId,
     useActive?: boolean
   ): Promise<C> {
-    this.logger.debug(
-      `Retrieving (${tenantId?.toString() || 'core'}) configuration for ${namespace}${name}...'`,
-      {
-        ...this.LOG_CONTEXT,
-        tenant: tenantId?.toString(),
-      }
-    );
+    this.logger.debug(`Retrieving (${tenantId?.toString() || 'core'}) configuration for ${namespace}${name}...'`, {
+      ...this.LOG_CONTEXT,
+      tenant: tenantId?.toString(),
+    });
 
     const configurationServiceUrl = await this.directory.getServiceUrl(
       adspId`urn:ads:platform:configuration-service:v2`
@@ -175,10 +172,13 @@ export class ConfigurationServiceImpl implements ConfigurationService {
     if (configuration === undefined) {
       configuration = (await this.retrieveConfiguration<C>(namespace, name, token, tenantId, useActive)) || null;
     } else {
-      this.logger.debug(`Configuration (${tenantId?.toString() || 'core'}) ${namespace}:${name} retrieved from cache.`, {
-        ...this.LOG_CONTEXT,
-        tenant: tenantId?.toString(),
-      });
+      this.logger.debug(
+        `Configuration (${tenantId?.toString() || 'core'}) ${namespace}:${name} retrieved from cache.`,
+        {
+          ...this.LOG_CONTEXT,
+          tenant: tenantId?.toString(),
+        }
+      );
     }
 
     return configuration;
@@ -222,6 +222,7 @@ export class ConfigurationServiceImpl implements ConfigurationService {
 
     const coreConfiguration = await this.getConfigurationFromCacheOrApi(namespace, name, token, null, true);
 
+    console.log('coreConfiguration', coreConfiguration);
     return this.#combine(tenantConfiguration, coreConfiguration, tenantId) as R;
   };
 
diff --git a/libs/adsp-service-sdk/src/registration/registration.ts b/libs/adsp-service-sdk/src/registration/registration.ts
index a3e1dd561..32686a79e 100644
--- a/libs/adsp-service-sdk/src/registration/registration.ts
+++ b/libs/adsp-service-sdk/src/registration/registration.ts
@@ -191,13 +191,17 @@ export class ServiceRegistrarImpl implements ServiceRegistrar {
     );
 
     const token = await this.tokenProvider.getAccessToken();
-    await axios.patch(
-      configurationUrl.href,
-      {
-        operation: 'UPDATE',
-        update,
-      },
-      { headers: { Authorization: `Bearer ${token}` } }
-    );
+    try {
+      await axios.patch(
+        configurationUrl.href,
+        {
+          operation: 'UPDATE',
+          update,
+        },
+        { headers: { Authorization: `Bearer ${token}` } }
+      );
+    } catch (err) {
+      this.logger.error(`Err on tryUpdateConfiguration = ${err}`);
+    }
   };
 }
diff --git a/libs/jsonforms-components/src/lib/Context/register/registerContext.tsx b/libs/jsonforms-components/src/lib/Context/register/registerContext.tsx
index 6dcfe7993..b07c1ab46 100644
--- a/libs/jsonforms-components/src/lib/Context/register/registerContext.tsx
+++ b/libs/jsonforms-components/src/lib/Context/register/registerContext.tsx
@@ -135,6 +135,7 @@ export const JsonFormRegisterProvider = ({
       }
     }
   }, [dispatch, defaultRegisters]);
+
   /* The client might use the context outside of the Jsonform to provide custom register data */
   if (registerCtx?.isProvided) {
     // eslint-disable-next-line
diff --git a/libs/jsonforms-components/tsconfig.lib.json b/libs/jsonforms-components/tsconfig.lib.json
index 8a3871d76..cc415c910 100644
--- a/libs/jsonforms-components/tsconfig.lib.json
+++ b/libs/jsonforms-components/tsconfig.lib.json
@@ -2,8 +2,16 @@
   "extends": "./tsconfig.json",
   "compilerOptions": {
     "outDir": "../../dist/out-tsc",
-    "types": ["node", "../../node_modules/@nx/react/typings/cssmodule.d.ts", "../../node_modules/@nx/react/typings/image.d.ts"]
+    "types": [
+      "node",
+      "../../node_modules/@nx/react/typings/cssmodule.d.ts",
+      "../../node_modules/@nx/react/typings/image.d.ts"
+    ]
   },
+  "files": [
+    "../../node_modules/@nx/react/typings/cssmodule.d.ts",
+    "../../node_modules/@nx/react/typings/image.d.ts"
+  ],
   "exclude": [
     "jest.config.ts",
     "src/**/*.spec.ts",
@@ -15,5 +23,10 @@
     "src/**/*.spec.jsx",
     "src/**/*.test.jsx"
   ],
-  "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
-}
+  "include": [
+    "src/**/*.js",
+    "src/**/*.jsx",
+    "src/**/*.ts",
+    "src/**/*.tsx"
+  ]
+}
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 4d61c59f3..d4d76dcba 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -14,11 +14,13 @@
         "@emotion/react": "11.11.1",
         "@emotion/styled": "11.11.0",
         "@faker-js/faker": "7.0.1",
+        "@jsdevtools/ono": "^7.1.3",
         "@keycloak/keycloak-admin-client": "^19.0.3",
         "@socket.io/redis-adapter": "^8.3.0",
         "ajv": "^8.6.1",
         "ajv-errors": "^3.0.0",
         "ajv-formats": "^3.0.1",
+        "ajv-keywords": "^5.1.0",
         "amqp-connection-manager": "^3.7.0",
         "amqplib": "^0.8.0",
         "app-root-path": "^3.0.0",
@@ -8768,8 +8770,7 @@
     "node_modules/@jsdevtools/ono": {
       "version": "7.1.3",
       "resolved": "https://registry.npmjs.org/@jsdevtools/ono/-/ono-7.1.3.tgz",
-      "integrity": "sha512-4JQNk+3mVzK3xh2rqd6RB4J46qUR19azEHBneZyTZM+c456qOrbbM/5xcR8huNCCcbVt7+UmizG6GuUvPvKUYg==",
-      "dev": true
+      "integrity": "sha512-4JQNk+3mVzK3xh2rqd6RB4J46qUR19azEHBneZyTZM+c456qOrbbM/5xcR8huNCCcbVt7+UmizG6GuUvPvKUYg=="
     },
     "node_modules/@jsep-plugin/assignment": {
       "version": "1.2.1",
@@ -16857,8 +16858,7 @@
     "node_modules/@types/prop-types": {
       "version": "15.7.11",
       "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.11.tgz",
-      "integrity": "sha512-ga8y9v9uyeiLdpKddhxYQkxNDrfvuPrlFb0N1qnZZByvcElJaXthF1UhvCh9TLWJBEHeNtdnbysW7Y6Uq8CVng==",
-      "dev": true
+      "integrity": "sha512-ga8y9v9uyeiLdpKddhxYQkxNDrfvuPrlFb0N1qnZZByvcElJaXthF1UhvCh9TLWJBEHeNtdnbysW7Y6Uq8CVng=="
     },
     "node_modules/@types/qs": {
       "version": "6.9.11",
@@ -16874,7 +16874,6 @@
       "version": "18.2.33",
       "resolved": "https://registry.npmjs.org/@types/react/-/react-18.2.33.tgz",
       "integrity": "sha512-v+I7S+hu3PIBoVkKGpSYYpiBT1ijqEzWpzQD62/jm4K74hPpSP7FF9BnKG6+fg2+62weJYkkBWDJlZt5JO/9hg==",
-      "dev": true,
       "dependencies": {
         "@types/prop-types": "*",
         "@types/scheduler": "*",
@@ -16965,8 +16964,7 @@
     "node_modules/@types/scheduler": {
       "version": "0.16.8",
       "resolved": "https://registry.npmjs.org/@types/scheduler/-/scheduler-0.16.8.tgz",
-      "integrity": "sha512-WZLiwShhwLRmeV6zH+GkbOFT6Z6VklCItrDioxUnv+u4Ll+8vKeFySoFyK/0ctcRpOmwAicELfmys1sDc/Rw+A==",
-      "dev": true
+      "integrity": "sha512-WZLiwShhwLRmeV6zH+GkbOFT6Z6VklCItrDioxUnv+u4Ll+8vKeFySoFyK/0ctcRpOmwAicELfmys1sDc/Rw+A=="
     },
     "node_modules/@types/semver": {
       "version": "7.5.8",
@@ -18053,7 +18051,6 @@
       "version": "5.1.0",
       "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
       "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
-      "dev": true,
       "dependencies": {
         "fast-deep-equal": "^3.1.3"
       },
@@ -24047,6 +24044,7 @@
       "version": "2.30.0",
       "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.30.0.tgz",
       "integrity": "sha512-fnULvOpxnC5/Vg3NCiWelDsLiUc9bRwAPs/+LfTLNvetFCtCTN+yQz15C/fs4AwX1R9K5GLtLfn8QW+dWisaAw==",
+      "dev": true,
       "dependencies": {
         "@babel/runtime": "^7.21.0"
       },
@@ -43045,15 +43043,13 @@
     },
     "node_modules/react-components-new": {
       "name": "@abgov/react-components",
-      "version": "4.18.1",
-      "resolved": "https://registry.npmjs.org/@abgov/react-components/-/react-components-4.18.1.tgz",
-      "integrity": "sha512-O6vZe3Ciqu+t4j+p6bZ4hI45V9NKg0Vjs8Jyq1TskaYpWHzkw1RzBsxS9rh7eGOZKzpvdwEIXD4Sc21LGD8sDA==",
-      "dependencies": {
-        "date-fns": "^2.29.2"
-      },
+      "version": "4.24.0",
+      "resolved": "https://registry.npmjs.org/@abgov/react-components/-/react-components-4.24.0.tgz",
+      "integrity": "sha512-oFkS8hENdDbUCHnFzM6D6STg/3WNNAU1uuFTfF3YHJqiv/ZrD0FhMkIjBA+/7dxQKdmzQKbz81EKR5juAq0G3g==",
       "peerDependencies": {
-        "react": ">=17.0.2",
-        "react-dom": ">=17.0.2"
+        "@types/react": "^17.0.0 || ^18.0.0",
+        "react": "^17.0.0 || ^18.0.0",
+        "react-dom": "^17.0.0 || ^18.0.0"
       }
     },
     "node_modules/react-dom": {
diff --git a/package.json b/package.json
index c3a6443cd..bc3df8671 100644
--- a/package.json
+++ b/package.json
@@ -41,11 +41,13 @@
     "@emotion/react": "11.11.1",
     "@emotion/styled": "11.11.0",
     "@faker-js/faker": "7.0.1",
+    "@jsdevtools/ono": "^7.1.3",
     "@keycloak/keycloak-admin-client": "^19.0.3",
     "@socket.io/redis-adapter": "^8.3.0",
     "ajv": "^8.6.1",
     "ajv-errors": "^3.0.0",
     "ajv-formats": "^3.0.1",
+    "ajv-keywords": "^5.1.0",
     "amqp-connection-manager": "^3.7.0",
     "amqplib": "^0.8.0",
     "app-root-path": "^3.0.0",
diff --git a/tools/workspace-plugin/src/generators/adsp-service/project-files/src/environments/environment.ts__tmpl__ b/tools/workspace-plugin/src/generators/adsp-service/project-files/src/environments/environment.ts__tmpl__
index c4ae82212..4667e1fec 100644
--- a/tools/workspace-plugin/src/generators/adsp-service/project-files/src/environments/environment.ts__tmpl__
+++ b/tools/workspace-plugin/src/generators/adsp-service/project-files/src/environments/environment.ts__tmpl__
@@ -7,7 +7,7 @@ dotenv.config();
 export const environment = envalid.cleanEnv(
   process.env,
   {
-    KEYCLOAK_ROOT_URL: envalid.str({ default: 'http://localhost:8080' }),
+    KEYCLOAK_ROOT_URL: envalid.str({ default: 'https://access.adsp-dev.gov.ab.ca' }),
     DIRECTORY_URL: envalid.str({ default: 'http://localhost:3331' }),
     CLIENT_ID: envalid.str({ default: 'urn:ads:platform:<%= projectName %>' }),
     CLIENT_SECRET: envalid.str(),
