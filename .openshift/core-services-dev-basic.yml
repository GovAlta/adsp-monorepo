kind: Template
apiVersion: v1
parameters:
- name: IMAGE_TAG
  displayName: "Image Tag"
  description: "Tag of the timescaledb image to use."
  # Note that -bitnami is used because the regular tag uses alpine based Postgres image where
  # initDb script does not work in OpenShift because of arbitrary UID.
  value: 1.7.1-pg12-bitnami
  required: true
- name: MEMORY_LIMIT
  displayName: "Memory Limit"
  description: "Maximum amount of memory the container can use."
  value: 512Mi
  required: true
- name: DATABASE_SERVICE_NAME
  displayName: "Database Service Name"
  description: "The name of the OpenShift service exposed for the database."
  value: timescaledb
  required: true
- name: DATABASE_NAME
  displayName: "Database Name"
  descriptiOn: "Name of the database accessed."
  value: "sampledb"
  required: true
- name: DATABASE_PASSWORD
  displayName: "Database Connection Password"
  description: "Password for the database user used to access the database."
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: VOLUME_CAPACITY
  displayName: "Volume Capacity"
  description: "Volume space available for data."
  value: 1Gi
  required: true
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: file-av-scanner
  spec:
    replicas: 1
    selector:
      app: file-av-scanner
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: file-av-scanner
      spec:
        volumes:
        - name: file-av-db-volume
          persistentVolumeClaim:
            claimName: file-av-db
        containers:
        - image: file-av-scanner
          imagePullPolicy: IfNotPresent
          name: file-av-scanner
          ports:
          - containerPort: 3310
            name: tcp
            protocol: TCP
          volumeMounts:
          - mountPath: /store
            name: file-av-db-volume
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          containerNames:
            - file-av-scanner
          from:
            kind: ImageStreamTag
            name: file-av-scanner:latest
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: file-service
    name: file-av-scanner
  spec:
    ports:
    - name: tcp
      port: 3310
      targetPort: 3310
    selector:
      app: file-av-scanner
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: file-service
    name: file-service
  spec:
    replicas: 1
    selector:
      app: file-service
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: file-service
      spec:
        volumes:
        - name: file-volume
          persistentVolumeClaim:
            claimName: file-service-files
        containers:
        - env:
            - name: NPM_RUN
              value: 'service'
            - name: KEYCLOAK_ROOT_URL
              value: 'https://access-uat.alpha.alberta.ca'
            - name: KEYCLOAK_REALM
              value: 'core'
            - name: MONGO_DB
              valueFrom:
                secretKeyRef:
                  key: database_name
                  name: mongodb-persistent-xmhxh-credentials-05jw8
            - name: MONGO_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mongodb-persistent-xmhxh-credentials-05jw8
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mongodb-persistent-xmhxh-credentials-05jw8
            - name: MONGO_URI
              valueFrom:
                secretKeyRef:
                  key: uri
                  name: mongodb-persistent-xmhxh-credentials-05jw8
            - name: AV_HOST
              value: 'http://vnn4457.gov.ab.ca'
            - name: AV_PORT
              value: '8008'
            - name: AV_PROVIDER
              value: meta
            - name: AMQP_HOST
            - name: LOG_LEVEL
              value: info
            - name: PORT
              value: '3333'
          image: file-service
          imagePullPolicy: IfNotPresent
          name: file-service
          ports:
          - containerPort: 3333
            name: http
            protocol: TCP
          volumeMounts:
          - mountPath: /data/files
            name: file-volume
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - file-service
          from:
            kind: ImageStreamTag
            name: file-service:latest
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: file-service
    name: file-service
  spec:
    ports:
    - name: http
      port: 3333
      targetPort: 3333
    selector:
      app: file-service
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: file-service
    name: file-service
  spec:
    port:
      targetPort: http
    tls:
      termination: edge
    to:
      kind: Service
      name: file-service
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: tenant-management-api
  spec:
    replicas: 1
    selector:
      app: tenant-management-api
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: tenant-management-api
      spec:
        containers:
          - env:
            - name: PORT
              value: '3333'
            - name: AV_HOST
              value: 'http://vnn4457.gov.ab.ca'
            - name: AV_PORT
              value: '8008'
            - name: AV_PROVIDER
              value: meta
            - name: AMQP_HOST
            image: tenant-management-api
            imagePullPolicy: IfNotPresent
            name: tenant-management-api
            ports:
              - containerPort: 3333
                name: http
                protocol: TCP
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - tenant-management-api
          from:
            kind: ImageStreamTag
            name: tenant-management-api:latest
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: tenant-management-api
    name: tenant-management-api
  spec:
    ports:
    - name: http
      port: 3333
      targetPort: 3333
    selector:
      app: tenant-management-api
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: tenant-management-api
    name: tenant-management-api
  spec:
    port:
      targetPort: http
    tls:
      termination: edge
    to:
      kind: Service
      name: tenant-management-api
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: tenant-management-webapp
  spec:
    replicas: 1
    selector:
      name: tenant-management-webapp
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: tenant-management-webapp
      spec:
        containers:
          - env:
            - name: PORT
              value: '8080'
            image: tenant-management-webapp
            imagePullPolicy: IfNotPresent
            name: tenant-management-webapp
            ports:
              - containerPort: 8080
                name: http
                protocol: TCP
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - tenant-management-webapp
          from:
            kind: ImageStreamTag
            name: tenant-management-webapp:dev'
            namespace: core-services-infra
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: tenant-management-webapp
    name: tenant-management-webapp
  spec:
    ports:
    - name: http
      port: 3333
      targetPort: 3333
    selector:
      app: tenant-management-webapp
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: tenant-management-webapp
    name: tenant-management-webapp
  spec:
    port:
      targetPort: http
    tls:
      termination: edge
    to:
      kind: Service
      name: tenant-management-webapp
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - timescaledb
        from:
          kind: ImageStreamTag
          name: timescaledb:${IMAGE_TAG}
    - type: ConfigChange
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - name: timescaledb
          image: " "
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: database-name
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          volumeMounts:
          - name: ${DATABASE_SERVICE_NAME}-data
            mountPath: "/bitnami/postgresql"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
      restartPolicy: Always
      dnsPolicy: ClusterFirst
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    annotations:
      template.openshift.io/expose-uri: "postgres://{.spec.clusterIP}:{.spec.ports[?(.name==\"postgresql\")].port}"
  spec:
    type: ClusterIP
    sessionAffinity: None
    selector:
      name: ${DATABASE_SERVICE_NAME}
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
  status:
    loadBalancer: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    annotations:
      template.openshift.io/expose-username: "{.data['database-user']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-database_name: "{.data['database-name']}"
  stringData:
    database-user: postgres
    database-password: ${DATABASE_PASSWORD}
    database-name: ${DATABASE_NAME}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: '2020-10-13T14:36:09Z'
    generation: 31
    labels:
      app: value-service
    name: value-service
    namespace: core-services-dev
  spec:
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      app: value-service
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: value-service
      spec:
        containers:
          - env:
              - name: KEYCLOAK_ROOT_URL
                value: 'https://access-uat.alpha.alberta.ca'
              - name: KEYCLOAK_REALM
                value: core
              - name: DB_HOST
                value: value-service-timescaledb
              - name: DB_PORT
                value: '5432'
              - name: DB_USER
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: value-service-timescaledb
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: value-service-timescaledb
              - name: DB_NAME
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: value-service-timescaledb
              - name: LOG_LEVEL
                value: info
              - name: PORT
                value: '3333'
            image: >-
              docker-registry.default.svc:5000/core-services-infra/value-service@sha256:15862afaf47e4bf22adac58cf5374e6bfa552c88506e8b472edbc51762095652
            imagePullPolicy: IfNotPresent
            name: value-service
            ports:
              - containerPort: 3333
                name: http
                protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
      - imageChangeParams:
          containerNames:
            - value-service
          from:
            kind: ImageStreamTag
            name: 'value-service:dev'
            namespace: core-services-infra
          lastTriggeredImage: >-
            value-service:latest
        type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: 'mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}'
    labels:
      template: mongodb-persistent-template
      template.openshift.io/template-instance-owner: c2cce299-01c8-11eb-b719-00505698f6fe
    name: file-service-mongodb
    namespace: core-services-dev
  spec:
    ports:
      - name: mongo
        port: 27017
        protocol: TCP
        targetPort: 27017
    selector:
      name: file-service-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
