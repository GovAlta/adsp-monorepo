apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: file-service
  annotations:
    tags: core-services, file-service
    template.openshift.io/provider-display-name: platform team
    description: File Service
labels:
  application: file-service
parameters:
  - name: APP_NAME
    displayName: App Name
    value: file-service
    required: true
  - name: INFRA_NAMESPACE
    description: Name of the infrastructure project.
    displayName: Infra Namespace
    value: core-services-infra
    required: true
  - name: NAMESPACE
    description: Namespace of the environment.
    displayName: Namespace
    value: core-services-dev
    required: true
  - name: BUILD_TAG
    description: Name of the ImageStreamTag to build.
    displayName: Build Tag
    value: latest
  - name: DEPLOY_TAG
    description: Name of the ImageStreamTag to deploy.
    displayName: Deploy Tag
    value: latest
  - name: ROUTE_HOST
    description: Host for the route.
    displayName: Route Host
    value: ""
objects:
  # File AV Scanner Objects

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: av
        apply-infra: "true"
      name: file-av-scanner
      namespace: ${INFRA_NAMESPACE}

  - apiVersion: v1
    kind: BuildConfig
    labels:
      app: ${APP_NAME}
      component: av
      apply-infra: "true"
    metadata:
      name: file-av-scanner
      namespace: ${INFRA_NAMESPACE}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: "file-av-scanner:latest"
      resources:
        limits:
          cpu: 200m
          memory: 200Mi
        requests:
          cpu: 20m
          memory: 50Mi
      successfulBuildsHistoryLimit: 5
      failedBuildsHistoryLimit: 5
      strategy:
        type: Docker
      source:
        type: Git
        git:
          uri: "git@github.com:GovAlta/adsp-monorepo.git"
          ref: main
        contextDir: apps/${APP_NAME}/av-scanner
        sourceSecret:
          name: adsp-monorepo-github-deploy-key
      triggers:
        - type: ConfigChange
      runPolicy: Serial

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: ${APP_NAME}
        component: av
        apply-init: "true"
      name: file-av-db
    spec:
      storageClassName: azure-disk
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 5Gi

  - kind: Service
    apiVersion: v1
    metadata:
      name: file-av-scanner
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        apply-dev: "true"
        apply-prod: "true"
        apply-staging: "true"
        apply-test: "true"
        component: av
    spec:
      ports:
        - name: clam
          protocol: TCP
          port: 3310
          targetPort: 3310
      selector:
        app: ${APP_NAME}
        component: av
      type: ClusterIP

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: file-av-scanner
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: av
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "file-av-scanner:latest",
                "namespace": "${INFRA_NAMESPACE}"
              },
              "fieldPath": "spec.template.spec.containers[0].image"
            }
          ]
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: av
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: av
        spec:
          volumes:
            - name: file-av-db-volume
              persistentVolumeClaim:
                claimName: file-av-db
          containers:
            - name: file-av-scanner
              image: >-
                image-registry.openshift-image-registry.svc:5000/adsp-build/file-av-scanner@latest
              ports:
                - name: tcp
                  containerPort: 3310
                  protocol: TCP
              resources:
                limits:
                  cpu: 1000m
                  memory: 5Gi
                requests:
                  cpu: 20m
                  memory: 50Mi
              volumeMounts:
                - name: file-av-db-volume
                  mountPath: /var/lib/clamav
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: IfNotPresent
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600

  # File Service Objects

  # ImageStream is here for reference.
  # There is a single ImageStream created in the infra project.
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-infra: "true"
      name: ${APP_NAME}
      namespace: ${INFRA_NAMESPACE}
    spec:
      tags:
        - name: ${BUILD_TAG}
          from:
            kind: DockerImage
            name: ghcr.io/govalta/${APP_NAME}:${BUILD_TAG}
          referencePolicy:
            type: Local

  # PersistentVolumeClaim is only generated for branch deployment to avoid losing persistent data.
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-init: "true"
      name: ${APP_NAME}-files
      namespace: ${NAMESPACE}
    spec:
      storageClassName: azure-file
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi

  # DeploymentConfig (and Service and Route) is created in each environment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:${DEPLOY_TAG}",
                "namespace": "${INFRA_NAMESPACE}"
              },
              "fieldPath": "spec.template.spec.containers[0].image",
              "paused": true
            }
          ]
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: api
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: api
        spec:
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/adsp-build/${APP_NAME}@${DEPLOY_TAG}
              envFrom:
                - configMapRef:
                    name: ${APP_NAME}
                - configMapRef:
                    name: directory-overrides
                - secretRef:
                    name: ${APP_NAME}
              env:
                - name: PORT
                  value: "3333"
                - name: FILE_PATH
                  value: /data/files
                - name: MONGO_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${APP_NAME}-mongodb
                - name: MONGO_URI
                  valueFrom:
                    secretKeyRef:
                      key: database-uri
                      name: ${APP_NAME}-mongodb
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${APP_NAME}-mongodb
                - name: MONGO_DB
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${APP_NAME}-mongodb
                - name: MONGO_TLS
                  valueFrom:
                    secretKeyRef:
                      name: file-service-mongodb
                      key: database-tls
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 3333
                  name: http
                  protocol: TCP
              resources:
                limits:
                  cpu: 100m
                  memory: 1Gi
                requests:
                  cpu: 20m
                  memory: 50Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 2
                timeoutSeconds: 1
                periodSeconds: 5
                successThreshold: 1
                failureThreshold: 20
              livenessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 2
                periodSeconds: 60
                successThreshold: 1
                failureThreshold: 5
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APP_NAME}
        component: job
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}-job
      namespace: ${NAMESPACE}
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:${DEPLOY_TAG}",
                "namespace": "${INFRA_NAMESPACE}"
              },
              "fieldPath": "spec.template.spec.containers[0].image"
            }
          ]
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: job
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: job
        spec:
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/adsp-build/${APP_NAME}@${DEPLOY_TAG}
              envFrom:
                - configMapRef:
                    name: ${APP_NAME}
                - configMapRef:
                    name: directory-overrides
                - secretRef:
                    name: ${APP_NAME}
              env:
                - name: PORT
                  value: "3333"
                - name: FILE_PATH
                  value: /data/files
                - name: MONGO_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${APP_NAME}-mongodb
                - name: MONGO_URI
                  valueFrom:
                    secretKeyRef:
                      key: database-uri
                      name: ${APP_NAME}-mongodb
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${APP_NAME}-mongodb
                - name: MONGO_DB
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${APP_NAME}-mongodb
                - name: MONGO_TLS
                  valueFrom:
                    secretKeyRef:
                      key: database-tls
                      name: ${APP_NAME}-mongodb
                - name: APP_NAME
                  value: "${APP_NAME}-job"
                - name: POD_TYPE
                  value: "job"
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 3333
                  name: http
                  protocol: TCP
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 20m
                  memory: 50Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 2
                timeoutSeconds: 1
                periodSeconds: 5
                successThreshold: 1
                failureThreshold: 20
              livenessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 2
                periodSeconds: 60
                successThreshold: 1
                failureThreshold: 5
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: http
          port: 3333
          protocol: TCP
          targetPort: 3333
      selector:
        app: ${APP_NAME}
        component: api
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      host: ${ROUTE_HOST}
      port:
        targetPort: http
      tls:
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None
