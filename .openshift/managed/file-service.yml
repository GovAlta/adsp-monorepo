apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: file-service
  annotations:
    tags: core-services, file-service
    template.openshift.io/provider-display-name: platform team
    description: File Service
labels:
  application: file-service
parameters:
  - name: INFRA_NAMESPACE
    description: Name of the infrastructure project.
    displayName: Infra Namespace
    value: core-services-infra
    required: true
  - name: NAMESPACE
    description: Namespace of the environment.
    displayName: Namespace
    value: core-services-dev
    required: true
  - name: NAME_SUFFIX
    description: Suffix applied to the names of the objects created.
    displayName: Name Suffix
    value: ""
  - name: BUILD_TAG
    description: Name of the ImageStreamTag to build.
    displayName: Build Tag
    value: latest
  - name: DEPLOY_TAG
    description: Name of the ImageStreamTag to deploy.
    displayName: Deploy Tag
    value: latest
  - name: ROUTE_HOST
    description: Host for the route.
    displayName: Route Host
    value: ""
  - description: Username for MongoDB user that will be used for accessing the database.
    displayName: MongoDB Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: MONGODB_USER
    required: true
  - description: Password for the MongoDB connection user.
    displayName: MongoDB Connection Password
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: MONGODB_PASSWORD
    required: true
  - description: Password for the database admin user.
    displayName: MongoDB Admin Password
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: MONGODB_ADMIN_PASSWORD
    required: true
objects:
  # MongoDB Objects
  # NOTE: Secret will generate new values if updated, so this is only for branch deployments.
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-admin_password: "{.data['database-admin-password']}"
        template.openshift.io/expose-database_name: "{.data['database-name']}"
        template.openshift.io/expose-password: "{.data['database-password']}"
        template.openshift.io/expose-username: "{.data['database-user']}"
      labels:
        app: file-service${NAME_SUFFIX}
        component: database
        apply-init: "true"
        apply-branch: "true"
      name: file-service-mongodb${NAME_SUFFIX}
    stringData:
      database-admin-password: ${MONGODB_ADMIN_PASSWORD}
      database-name: fileDb
      database-password: ${MONGODB_PASSWORD}
      database-user: ${MONGODB_USER}
      database-uri: mongodb://file-service-mongodb${NAME_SUFFIX}:27017
      database-tls: "false"
  # PersistentVolumeClaim is only generated for branch deployment to avoid losing persistent data.
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: file-service${NAME_SUFFIX}
        component: database
        apply-init: "true"
        apply-branch: "true"
      name: file-service-mongodb${NAME_SUFFIX}
    spec:
      storageClassName: azure-disk
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
      labels:
        app: file-service${NAME_SUFFIX}
        component: database
        apply-branch: "true"
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: file-service-mongodb${NAME_SUFFIX}
    spec:
      ports:
        - name: mongo
          nodePort: 0
          port: 27017
          protocol: TCP
          targetPort: 27017
      selector:
        app: file-service${NAME_SUFFIX}
        component: database
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app: file-service${NAME_SUFFIX}
        component: database
        apply-branch: "true"
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: file-service-mongodb${NAME_SUFFIX}
    spec:
      replicas: 1
      selector:
        app: file-service${NAME_SUFFIX}
        component: database
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: file-service${NAME_SUFFIX}
            component: database
        spec:
          containers:
            - capabilities: {}
              env:
                - name: MONGODB_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: file-service-mongodb${NAME_SUFFIX}
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: file-service-mongodb${NAME_SUFFIX}
                - name: MONGODB_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: file-service-mongodb${NAME_SUFFIX}
                - name: MONGODB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: file-service-mongodb${NAME_SUFFIX}
                - name: MONGO_TLS
                  valueFrom:
                    secretKeyRef:
                      key: database-tls
                      name: file-service-mongodb${NAME_SUFFIX}
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 30
                tcpSocket:
                  port: 27017
                timeoutSeconds: 1
              name: mongodb
              ports:
                - containerPort: 27017
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                      --eval="quit()"
                initialDelaySeconds: 3
                timeoutSeconds: 1
              resources:
                limits:
                  cpu: 200m
                  memory: 500Mi
                requests:
                  cpu: 20m
                  memory: 200Mi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/mongodb/data
                  name: file-service-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: file-service-data
              persistentVolumeClaim:
                claimName: file-service-mongodb${NAME_SUFFIX}
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - mongodb
            from:
              kind: ImageStreamTag
              name: mongodb:latest
              namespace: openshift
          type: ImageChange

  # File AV Scanner Objects

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: file-service
        component: av
        apply-infra: "true"
      name: file-av-scanner
      namespace: ${INFRA_NAMESPACE}

  - apiVersion: v1
    kind: BuildConfig
    labels:
      app: file-service
      component: av
      apply-infra: "true"
    metadata:
      name: file-av-scanner
      namespace: ${INFRA_NAMESPACE}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: "file-av-scanner:latest"
      resources:
        limits:
          cpu: 200m
          memory: 200Mi
        requests:
          cpu: 20m
          memory: 50Mi
      successfulBuildsHistoryLimit: 5
      failedBuildsHistoryLimit: 5
      strategy:
        type: Docker
      source:
        type: Git
        git:
          uri: "git@github.com:GovAlta/adsp-monorepo.git"
          ref: main
        contextDir: apps/file-service/av-scanner
        sourceSecret:
          name: adsp-monorepo-github-deploy-key
      triggers:
        - type: ConfigChange
      runPolicy: Serial

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: file-service
        component: av
        apply-init: "true"
      name: file-av-db
    spec:
      storageClassName: azure-disk
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 5Gi

  - kind: Service
    apiVersion: v1
    metadata:
      name: file-av-scanner
      labels:
        app: file-service
        apply-dev: 'true'
        apply-prod: 'true'
        apply-staging: 'true'
        apply-test: 'true'
        component: av
    spec:
      ports:
        - name: clam
          protocol: TCP
          port: 3310
          targetPort: 3310
      selector:
        app: file-service
        component: av
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: file-av-scanner
      labels:
        app: file-service
        component: av
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
    spec:
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 20m
            memory: 50Mi
        activeDeadlineSeconds: 21600
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            containerNames:
              - file-av-scanner
            from:
              kind: ImageStreamTag
              namespace: adsp-build
              name: "file-av-scanner:latest"
      replicas: 1
      revisionHistoryLimit: 10
      test: false
      selector:
        app: file-service
        component: av
      template:
        metadata:
          labels:
            app: file-service
            component: av
        spec:
          volumes:
            - name: file-av-db-volume
              persistentVolumeClaim:
                claimName: file-av-db
          containers:
            - name: file-av-scanner
              ports:
                - name: tcp
                  containerPort: 3310
                  protocol: TCP
              resources:
                limits:
                  cpu: 250m
                  memory: 5Gi
                requests:
                  cpu: 20m
                  memory: 50Mi
              volumeMounts:
                - name: file-av-db-volume
                  mountPath: /var/lib/clamav
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: IfNotPresent
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler

  # File Service Objects

  # ImageStream is here for reference.
  # There is a single ImageStream created in the infra project.
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: file-service
        component: api
        apply-infra: "true"
      name: file-service
      namespace: ${INFRA_NAMESPACE}
    spec:
      tags:
        - name: ${BUILD_TAG}
          from:
            kind: DockerImage
            name: ghcr.io/govalta/file-service:${BUILD_TAG}
          referencePolicy:
            type: Local

  # PersistentVolumeClaim is only generated for branch deployment to avoid losing persistent data.
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: file-service${NAME_SUFFIX}
        component: api
        apply-init: "true"
        apply-branch: "true"
      name: file-service-files${NAME_SUFFIX}
    spec:
      storageClassName: azure-file
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi

  # DeploymentConfig (and Service and Route) is created in each environment of the
  # primary pipline as well as branch deployment.
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: file-service${NAME_SUFFIX}
        component: api
        apply-branch: "true"
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: file-service${NAME_SUFFIX}
    spec:
      replicas: 3
      revisionHistoryLimit: 3
      selector:
        app: file-service${NAME_SUFFIX}
        component: api
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        activeDeadlineSeconds: 21600
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 20m
            memory: 50Mi
      template:
        metadata:
          labels:
            app: file-service${NAME_SUFFIX}
            component: api
        spec:
          containers:
            - envFrom:
                - configMapRef:
                    name: file-service
                - secretRef:
                    name: file-service
              env:
                - name: PORT
                  value: "3333"
                - name: FILE_PATH
                  value: /data/files
                - name: MONGO_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: file-service-mongodb${NAME_SUFFIX}
                - name: MONGO_URI
                  valueFrom:
                    secretKeyRef:
                      key: database-uri
                      name: file-service-mongodb${NAME_SUFFIX}
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: file-service-mongodb${NAME_SUFFIX}
                - name: MONGO_DB
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: file-service-mongodb${NAME_SUFFIX}
              imagePullPolicy: IfNotPresent
              name: file-service
              ports:
                - containerPort: 3333
                  name: http
                  protocol: TCP
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 20m
                  memory: 50Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 2
                timeoutSeconds: 1
                periodSeconds: 5
                successThreshold: 1
                failureThreshold: 20
              livenessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 2
                periodSeconds: 60
                successThreshold: 1
                failureThreshold: 5
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            containerNames:
              - file-service
            from:
              kind: ImageStreamTag
              name: file-service:${DEPLOY_TAG}
              namespace: ${INFRA_NAMESPACE}
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: file-service${NAME_SUFFIX}
        component: api
        apply-branch: "true"
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: file-service${NAME_SUFFIX}
    spec:
      ports:
        - name: http
          port: 3333
          protocol: TCP
          targetPort: 3333
      selector:
        app: file-service${NAME_SUFFIX}
        component: api
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: file-service${NAME_SUFFIX}
        component: api
        apply-branch: "true"
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: file-service${NAME_SUFFIX}
    spec:
      host: ${ROUTE_HOST}
      port:
        targetPort: http
      tls:
        termination: edge
      to:
        kind: Service
        name: file-service${NAME_SUFFIX}
        weight: 100
      wildcardPolicy: None
