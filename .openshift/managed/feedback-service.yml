apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: feedback-service
  annotations:
    tags: core-services, feedback-service
    template.openshift.io/provider-display-name: platform team
    description: Feedback service
labels:
  application: feedback-service
parameters:
  - name: INFRA_NAMESPACE
    description: Name of the infrastructure project.
    displayName: Infra Namespace
    value: core-services-infra
    required: true
  - name: NAMESPACE
    description: Namespace of the environment.
    displayName: Namespace
    value: core-services-dev
    required: true
  - name: NAME_SUFFIX
    description: Suffix applied to the names of the objects created.
    displayName: Name Suffix
    value: ''
  - name: BUILD_TAG
    description: Name of the ImageStreamTag to build.
    displayName: Build Tag
    value: latest
  - name: DEPLOY_TAG
    description: Name of the ImageStreamTag to deploy.
    displayName: Deploy Tag
    value: latest
  - name: ROUTE_HOST
    description: Host for the route.
    displayName: Route Host
    value: ''
objects:
  # Service Objects

  # ImageStream is here for reference.
  # There is a single ImageStream created in the infra project.
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: feedback-service
        component: api
        apply-infra: 'true'
      name: feedback-service
      namespace: ${INFRA_NAMESPACE}
    spec:
      tags:
        - name: ${BUILD_TAG}
          from:
            kind: DockerImage
            name: ghcr.io/govalta/feedback-service:${BUILD_TAG}
          referencePolicy:
            type: Local

  # DeploymentConfig (and Service and Route) is created in each environment of the
  # primary pipline as well as branch deployment.
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: feedback-service${NAME_SUFFIX}
        component: api
        apply-branch: 'true'
        apply-dev: 'true'
        apply-test: 'true'
        apply-staging: 'true'
        apply-prod: 'true'
      name: feedback-service${NAME_SUFFIX}
    spec:
      replicas: 3
      revisionHistoryLimit: 3
      selector:
        app: feedback-service${NAME_SUFFIX}
        component: api
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        activeDeadlineSeconds: 21600
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 20m
            memory: 50Mi
      template:
        metadata:
          labels:
            app: feedback-service${NAME_SUFFIX}
            component: api
        spec:
          containers:
            - envFrom:
                - configMapRef:
                    name: feedback-service
                - configMapRef:
                    name: directory-overrides
                - secretRef:
                    name: feedback-service
              env:
                - name: PORT
                  value: '3333'
              imagePullPolicy: IfNotPresent
              name: feedback-service
              ports:
                - containerPort: 3333
                  name: http
                  protocol: TCP
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 20m
                  memory: 50Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 2
                timeoutSeconds: 1
                periodSeconds: 5
                successThreshold: 1
                failureThreshold: 20
              livenessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 2
                periodSeconds: 60
                successThreshold: 1
                failureThreshold: 5
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            containerNames:
              - feedback-service
            from:
              kind: ImageStreamTag
              name: feedback-service:${DEPLOY_TAG}
              namespace: ${INFRA_NAMESPACE}
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: feedback-service${NAME_SUFFIX}
        component: api
        apply-branch: 'true'
        apply-dev: 'true'
        apply-test: 'true'
        apply-staging: 'true'
        apply-prod: 'true'
      name: feedback-service${NAME_SUFFIX}
    spec:
      ports:
        - name: http
          port: 3333
          protocol: TCP
          targetPort: 3333
      selector:
        app: feedback-service${NAME_SUFFIX}
        component: api
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: feedback-service${NAME_SUFFIX}
        component: api
        apply-branch: 'true'
        apply-dev: 'true'
        apply-test: 'true'
        apply-staging: 'true'
        apply-prod: 'true'
      name: feedback-service${NAME_SUFFIX}
    spec:
      host: ${ROUTE_HOST}
      port:
        targetPort: http
      tls:
        termination: edge
      to:
        kind: Service
        name: feedback-service${NAME_SUFFIX}
        weight: 100
      wildcardPolicy: None
