apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: tenant-management-webapp
  annotations:
    tags: core-services, tenant-management
    template.openshift.io/provider-display-name: platform team
    description: Tenant Management Web App
labels:
  application: tenant-management
parameters:
  - name: APP_NAME
    displayName: App Name
    value: tenant-management-webapp
    required: true
  - name: INFRA_NAMESPACE
    description: Name of the infrastructure project.
    displayName: Infra Namespace
    value: core-services-infra
    required: true
  - name: NAMESPACE
    description: Namespace of the environment.
    displayName: Namespace
    value: core-services-dev
    required: true
  - name: BUILD_TAG
    description: Name of the ImageStreamTag to build.
    displayName: Build Tag
    value: latest
  - name: DEPLOY_TAG
    description: Name of the ImageStreamTag to deploy.
    displayName: Deploy Tag
    value: latest
  - name: ROUTE_HOST
    description: Host for the route.
    displayName: Route Host
    value: ""
objects:
  # ImageStream is here for reference.
  # There is a single ImageStream created in the infra project.
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: tenant-management
        component: app
        apply-infra: "true"
      name: ${APP_NAME}
      namespace: ${INFRA_NAMESPACE}
    spec:
      tags:
        - name: ${BUILD_TAG}
          from:
            kind: DockerImage
            name: ghcr.io/govalta/${APP_NAME}:${BUILD_TAG}
          referencePolicy:
            type: Local

  # DeploymentConfig (and Service and Route) is created in each environment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: tenant-management
        component: app
        apply-dev: "true"
        apply-test: "true"
        apply-uat: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:${DEPLOY_TAG}",
                "namespace": "${INFRA_NAMESPACE}"
              },
              "fieldPath": "spec.template.spec.containers[0].image",
              "paused": true
            }
          ]
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: tenant-management
          component: app
      template:
        metadata:
          labels:
            app: tenant-management
            component: app
        spec:
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/adsp-build/${APP_NAME}@${DEPLOY_TAG}
              env:
                - name: PORT
                  value: "8080"
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
              volumeMounts:
                - mountPath: /opt/app-root/src/config
                  name: config-volume
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 20m
                  memory: 50Mi
          volumes:
            - configMap:
                defaultMode: 420
                items:
                  - key: configuration
                    path: config.json
                name: ${APP_NAME}
              name: config-volume
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: tenant-management
        component: app
        apply-dev: "true"
        apply-test: "true"
        apply-uat: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: http
          port: 8080
          targetPort: 8080
      selector:
        app: tenant-management
        component: app
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: tenant-management
        component: app
        apply-dev: "true"
        apply-test: "true"
        apply-uat: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      host: ${ROUTE_HOST}
      port:
        targetPort: http
      tls:
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None
