apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: event-service
  annotations:
    tags: core-services, event-service
    template.openshift.io/provider-display-name: platform team
    description: Event Service
labels:
  application: event-service
parameters:
  - name: APP_NAME
    displayName: App Name
    value: event-service
    required: true
  - name: INFRA_NAMESPACE
    description: Name of the infrastructure project.
    displayName: Infra Namespace
    value: core-services-infra
    required: true
  - name: NAMESPACE
    description: Namespace of the environment.
    displayName: Namespace
    value: core-services-dev
    required: true
  - name: BUILD_TAG
    description: Name of the ImageStreamTag to build.
    displayName: Build Tag
    value: latest
  - name: DEPLOY_TAG
    description: Name of the ImageStreamTag to deploy.
    displayName: Deploy Tag
    value: latest
  - name: ROUTE_HOST
    description: Host for the route.
    displayName: Route Host
    value: ""
  - name: RABBITMQ_USER
    description: Username for the RabbitMQ instance.
    generate: expression
    from: user[A-Z0-9]{3}
  - name: RABBITMQ_PASS
    description: Password securing the RabbitMQ instance.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
  - name: RABBITMQ_ERLANG_COOKIE
    description: Cookie used for authentication of cluster nodes.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
objects:
  # RabbitMQ Objects
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ${APP_NAME}-rabbitmq
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      name: ${APP_NAME}-rabbitmq-view
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
    roleRef:
      kind: Role
      name: view
    subjects:
      - kind: ServiceAccount
        name: ${APP_NAME}-rabbitmq
  - apiVersion: v1
    kind: Secret
    stringData:
      username: ${RABBITMQ_USER}
      password: ${RABBITMQ_PASS}
      cookie: ${RABBITMQ_ERLANG_COOKIE}
    metadata:
      name: ${APP_NAME}-
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
    type: Opaque
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${APP_NAME}-rabbitmq
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
    data:
      rabbitmq.conf: |
        loopback_users.guest = false

        ## Clustering
        cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
        cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
        cluster_formation.k8s.address_type = hostname
        cluster_formation.k8s.service_name = ${APP_NAME}-rabbitmq
        cluster_formation.k8s.hostname_suffix = .${APP_NAME}-rabbitmq.${NAMESPACE}.svc.cluster.local
        cluster_formation.node_cleanup.interval = 10
        cluster_formation.node_cleanup.only_log_warning = true
        cluster_partition_handling = autoheal
        ## queue master locator
        queue_master_locator = min-masters
        ## Quorum queue replication
        quorum_queue.continuous_membership_reconciliation.enabled = true
        quorum_queue.continuous_membership_reconciliation.target_group_size = 3
        ## Disk space
        disk_free_limit.absolute = 1.5GB
        ## Memory
        vm_memory_high_watermark.absolute = 3Gi
        ## Logging
        log.console = true
      enabled_plugins: |
        [rabbitmq_management,rabbitmq_peer_discovery_k8s,rabbitmq_shovel,rabbitmq_shovel_management].
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APP_NAME}-rabbitmq-balancer
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
    spec:
      type: ClusterIP
      ports:
        - name: http
          protocol: TCP
          port: 15672
          targetPort: 15672
        - name: amqp
          protocol: TCP
          port: 5672
          targetPort: 5672
      selector:
        app: ${APP_NAME}
        component: queue
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APP_NAME}-rabbitmq
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
    spec:
      selector:
        app: ${APP_NAME}
        component: queue
      clusterIP: None
      ports:
        - name: amqp
          port: 5672
          targetPort: 5672
        - name: clustering
          port: 25672
          targetPort: 25672
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: ${APP_NAME}-rabbitmq
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "rabbitmq:4.1-management",
                "namespace": "adsp-build"
              },
              "fieldPath": "spec.template.spec.containers[0].image",
              "paused": true
            }
          ]
    spec:
      serviceName: ${APP_NAME}-rabbitmq
      replicas: 3
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: queue
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: queue
        spec:
          serviceAccountName: ${APP_NAME}-rabbitmq
          terminationGracePeriodSeconds: 30
          initContainers:
            - name: rm-erlang-cookie
              image: 'busybox:1.37'
              command:
                - sh
                - '-c'
                - rm -f /var/lib/rabbitmq/.erlang.cookie
              resources:
                limits:
                  cpu: 200m
                  memory: 500Mi
                requests:
                  cpu: 100m
                  memory: 200Mi
              volumeMounts:
                - name: ${APP_NAME}-rabbitmq-storage
                  mountPath: /var/lib/rabbitmq
              imagePullPolicy: IfNotPresent
          containers:
            - name: rabbitmq
              command:
                - sh
              args:
                - -c
                - cp -v /etc/rabbitmq/rabbitmq.conf ${RABBITMQ_CONFIG_FILE}.conf; exec docker-entrypoint.sh rabbitmq-server
              image: rabbitmq:4.0-management
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/rabbitmq
                - name: ${APP_NAME}-rabbitmq-storage
                  mountPath: /var/lib/rabbitmq
              ports:
                - name: http
                  protocol: TCP
                  containerPort: 15672
                - name: amqp
                  protocol: TCP
                  containerPort: 5672
                - name: clustering
                  protocol: TCP
                  containerPort: 25672
              livenessProbe:
                exec:
                  command: ["rabbitmq-diagnostics", "ping"]
                initialDelaySeconds: 120
                periodSeconds: 60
                timeoutSeconds: 30
              readinessProbe:
                exec:
                  command: ["rabbitmq-diagnostics", "ping"]
                initialDelaySeconds: 30
                periodSeconds: 60
                timeoutSeconds: 30
              env:
                - name: RABBITMQ_DEFAULT_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-rabbitmq
                      key: username
                - name: RABBITMQ_DEFAULT_PASS
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-rabbitmq
                      key: password
                - name: RABBITMQ_ERLANG_COOKIE
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-rabbitmq
                      key: cookie
                - name: K8S_SERVICE_NAME
                  value: ${APP_NAME}-rabbitmq
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: RABBITMQ_USE_LONGNAME
                  value: "true"
                - name: RABBITMQ_NODENAME
                  value: "rabbit@$(POD_NAME).${APP_NAME}-rabbitmq.$(POD_NAMESPACE).svc.cluster.local"
                - name: RABBITMQ_CONFIG_FILE
                  value: /var/lib/rabbitmq/rabbitmq
              resources:
                limits:
                  cpu: 1000m
                  memory: 4Gi
                requests:
                  cpu: 100m
                  memory: 200Mi
          volumes:
            - name: config-volume
              configMap:
                name: ${APP_NAME}-rabbitmq
                items:
                  - key: rabbitmq.conf
                    path: rabbitmq.conf
                  - key: enabled_plugins
                    path: enabled_plugins
      volumeClaimTemplates:
        - metadata:
            name: ${APP_NAME}-rabbitmq-storage
            labels:
              app: ${APP_NAME}
              component: queue
          spec:
            storageClassName: azure-disk
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
      podManagementPolicy: Parallel
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: ${APP_NAME}-rabbitmq
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_NAME}
        component: queue
        apply-init: "true"
    spec:
      port:
        targetPort: http
      tls:
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}-rabbitmq-balancer
        weight: 100
      wildcardPolicy: None

  # Event Service Objects

  # ImageStream is here for reference.
  # There is a single ImageStream created in the infra project.
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-infra: "true"
      name: ${APP_NAME}
      namespace: ${INFRA_NAMESPACE}
    spec:
      tags:
        - name: ${BUILD_TAG}
          from:
            kind: DockerImage
            name: ghcr.io/govalta/${APP_NAME}:${BUILD_TAG}
          referencePolicy:
            type: Local

  # DeploymentConfig (and Service and Route) is created in each environment of the
  # primary pipeline as well as branch deployment.
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:${DEPLOY_TAG}",
                "namespace": "${INFRA_NAMESPACE}"
              },
              "fieldPath": "spec.template.spec.containers[0].image",
              "paused": false
            }
          ]
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: api
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: api
        spec:
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/adsp-build/${APP_NAME}@${DEPLOY_TAG}
              envFrom:
                - configMapRef:
                    name: ${APP_NAME}
                - configMapRef:
                    name: directory-overrides
                - secretRef:
                    name: ${APP_NAME}
              env:
                - name: PORT
                  value: "3333"
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 3333
                  name: http
                  protocol: TCP
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 20m
                  memory: 50Mi
              terminationMessagePath: /dev/termination-log
              readinessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 2
                timeoutSeconds: 1
                periodSeconds: 5
                successThreshold: 1
                failureThreshold: 20
              livenessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 2
                periodSeconds: 60
                successThreshold: 1
                failureThreshold: 5
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APP_NAME}
        component: job
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}-job
      namespace: ${NAMESPACE}
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:${DEPLOY_TAG}",
                "namespace": "${INFRA_NAMESPACE}"
              },
              "fieldPath": "spec.template.spec.containers[0].image"
            }
          ]
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: job
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: job
        spec:
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/adsp-build/${APP_NAME}@${DEPLOY_TAG}
              envFrom:
                - configMapRef:
                    name: ${APP_NAME}
                - configMapRef:
                    name: directory-overrides
                - secretRef:
                    name: ${APP_NAME}
              env:
                - name: PORT
                  value: "3333"
                - name: AMQP_CONSUMER_PRIORITY
                  value: "1"
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 3333
                  name: http
                  protocol: TCP
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 20m
                  memory: 50Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 2
                timeoutSeconds: 1
                periodSeconds: 5
                successThreshold: 1
                failureThreshold: 20
              livenessProbe:
                httpGet:
                  path: /
                  port: 3333
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 2
                periodSeconds: 60
                successThreshold: 1
                failureThreshold: 5
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: http
          port: 3333
          protocol: TCP
          targetPort: 3333
      selector:
        app: ${APP_NAME}
        component: api
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      host: ${ROUTE_HOST}
      port:
        targetPort: http
      tls:
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None
