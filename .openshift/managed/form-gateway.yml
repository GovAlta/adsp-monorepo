apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: form-gateway
  annotations:
    tags: core-services, form-gateway
    template.openshift.io/provider-display-name: platform team
    description: Form gateway
labels:
  application: form-gateway
parameters:
  - name: APP_NAME
    required: true
    description: The application name of the service.
    displayName: application name
    value: form-gateway
  - name: INFRA_NAMESPACE
    description: Name of the infrastructure project.
    displayName: Infra Namespace
    value: core-services-infra
    required: true
  - name: NAMESPACE
    description: Namespace of the environment.
    displayName: Namespace
    value: core-services-dev
    required: true
  - name: BUILD_TAG
    description: Name of the ImageStreamTag to build.
    displayName: Build Tag
    value: latest
  - name: DEPLOY_TAG
    description: Name of the ImageStreamTag to deploy.
    displayName: Deploy Tag
    value: latest
  - name: ROUTE_HOST
    description: Host for the route.
    displayName: Route Host
    value: ""
  - description: Password for the Redis connection user.
    displayName: Redis Connection Password
    from: "[a-zA-Z0-9]{24}"
    generate: expression
    name: REDIS_PASSWORD
    required: true
objects:
  # Redis Objects
  # NOTE: Secret will generate new values if updated, so this is only for branch deployments.
  - apiVersion: v1
    kind: Secret
    metadata:
      labels:
        app: ${APP_NAME}
        component: database
        apply-init: "true"
      name: ${APP_NAME}-redis
      namespace: ${NAMESPACE}
    stringData:
      database-password: ${REDIS_PASSWORD}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
      labels:
        app: ${APP_NAME}
        component: database
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}-redis
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: redis
          nodePort: 0
          port: 6379
          protocol: TCP
          targetPort: 6379
      selector:
        app: ${APP_NAME}
        component: database
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "redis:5-el8",
                "namespace": "openshift"
              },
              "fieldPath": "spec.template.spec.containers[0].image"
            }
          ]
      labels:
        app: ${APP_NAME}
        component: database
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}-redis
      namespace: ${NAMESPACE}
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: database
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: database
        spec:
          containers:
            - env:
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${APP_NAME}-redis
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 60
                tcpSocket:
                  port: 6379
                timeoutSeconds: 30
              name: redis
              ports:
                - containerPort: 6379
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
                initialDelaySeconds: 60
                timeoutSeconds: 1
              resources:
                requests:
                  cpu: 20m
                  memory: 100Mi
                limits:
                  cpu: 200m
                  memory: 512Mi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/redis/data
                  name: ${APP_NAME}-redis-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: ${APP_NAME}-redis-data
              persistentVolumeClaim:
                claimName: ${APP_NAME}-redis
      strategy:
        type: Recreate

  # Service Objects

  # ImageStream is here for reference.
  # There is a single ImageStream created in the infra project.
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-infra: "true"
      name: ${APP_NAME}
      namespace: ${INFRA_NAMESPACE}
    spec:
      tags:
        - name: ${BUILD_TAG}
          from:
            kind: DockerImage
            name: ghcr.io/govalta/${APP_NAME}:${BUILD_TAG}
          referencePolicy:
            type: Local

  # DeploymentConfig (and Service and Route) is created in each environment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:${DEPLOY_TAG}",
                "namespace": "${INFRA_NAMESPACE}"
              },
              "fieldPath": "spec.template.spec.containers[0].image",
              "paused": true
            }
          ]
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: ${APP_NAME}
          component: api
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            component: api
        spec:
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/adsp-build/${APP_NAME}@${DEPLOY_TAG}
              envFrom:
                - configMapRef:
                    name: ${APP_NAME}
                - configMapRef:
                    name: directory-overrides
                - secretRef:
                    name: ${APP_NAME}
              env:
                - name: PORT
                  value: "3333"
                - name: REDIS_HOST
                  value: ${APP_NAME}-redis
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${APP_NAME}-redis
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 3333
                  name: http
                  protocol: TCP
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 20m
                  memory: 50Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: http
          port: 3333
          protocol: TCP
          targetPort: 3333
      selector:
        app: ${APP_NAME}
        component: api
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: api
        apply-dev: "true"
        apply-test: "true"
        apply-staging: "true"
        apply-prod: "true"
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      host: ${ROUTE_HOST}
      port:
        targetPort: http
      tls:
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None
