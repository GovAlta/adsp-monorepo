kind: Template
apiVersion: v1
metadata:
  name: timescaledb
  annotations:
    openshift.io/display-name: "TimescaleDB"
    description: "Timescale DB database service."
    tags: "database,postgresql,timescale"
    openshift.io/provider-display-name: "Government of Alberta - Digital Innovation Office"
labels:
  template: timescaledb-template
parameters:
- name: IMAGE_TAG
  displayName: "Image Tag"
  description: "Tag of the timescaledb image to use."
  # Note that -bitnami is used because the regular tag uses alpine based Postgres image where
  # initDb script does not work in OpenShift because of arbitrary UID.
  value: 1.7.1-pg12-bitnami
  required: true
- name: MEMORY_LIMIT
  displayName: "Memory Limit"
  description: "Maximum amount of memory the container can use."
  value: 512Mi
  required: true
- name: DATABASE_SERVICE_NAME
  displayName: "Database Service Name"
  description: "The name of the OpenShift service exposed for the database."
  value: timescaledb
  required: true
- name: DATABASE_NAME
  displayName: "Database Name"
  descriptiOn: "Name of the database accessed."
  value: "sampledb"
  required: true
- name: DATABASE_PASSWORD
  displayName: "Database Connection Password"
  description: "Password for the database user used to access the database."
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: VOLUME_CAPACITY
  displayName: "Volume Capacity"
  description: "Volume space available for data."
  value: 1Gi
  required: true
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: timescaledb
  spec:
    lookupPolicy:
      local: false
    tags:
      - name: ${IMAGE_TAG}
        annotations:
          openshift.io/imported-from: timescale/timescaledb:${IMAGE_TAG}
        from:
          kind: DockerImage
          name: timescale/timescaledb:${IMAGE_TAG}
        referencePolicy:
          type: Source
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    annotations:
      template.openshift.io/expose-username: "{.data['database-user']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-database_name: "{.data['database-name']}"
  stringData:
    database-user: postgres
    database-password: ${DATABASE_PASSWORD}
    database-name: ${DATABASE_NAME}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    annotations:
      template.openshift.io/expose-uri: "postgres://{.spec.clusterIP}:{.spec.ports[?(.name==\"postgresql\")].port}"
  spec:
    type: ClusterIP
    sessionAffinity: None
    selector:
      name: ${DATABASE_SERVICE_NAME}
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
  status:
    loadBalancer: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - timescaledb
        from:
          kind: ImageStreamTag
          name: timescaledb:${IMAGE_TAG}
    - type: ConfigChange
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - name: timescaledb
          image: " "
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: database-name
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          volumeMounts:
          - name: ${DATABASE_SERVICE_NAME}-data
            mountPath: "/bitnami/postgresql"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
      restartPolicy: Always
      dnsPolicy: ClusterFirst
