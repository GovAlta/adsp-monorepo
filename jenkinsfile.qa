def vaultSecretEnvMapping = [
    [path: 'secret/core-services-jenkins/dev', engineVersion: 2, secretValues: [
        [envVar: 'cyDevCoreAPIClientSecret', vaultKey: 'core-api-client-secret'],
        [envVar: 'cyDevCoreAPIUserPassword', vaultKey: 'core-api-user-password'],
        [envVar: 'cyDevClientSecret', vaultKey: 'client-secret'],
        [envVar: 'cyDevPassword', vaultKey: 'password'],
        [envVar: 'cyDevPassword2', vaultKey: 'password2']]

    ],
    [path: 'secret/core-services-jenkins/test', engineVersion: 2, secretValues: [
        [envVar: 'cyTestCoreAPIClientSecret', vaultKey: 'core-api-client-secret'],
        [envVar: 'cyTestCoreAPIUserPassword', vaultKey: 'core-api-user-password'],
        [envVar: 'cyTestClientSecret', vaultKey: 'client-secret'],
        [envVar: 'cyTestPassword', vaultKey: 'password'],
        [envVar: 'cyTestPassword2', vaultKey: 'password2']]
    ]
]
pipeline {
  agent {
    node {
      label "node12-cypress"
    }
  }
    parameters {
        string(
          name: 'source_repo',
          defaultValue: 'https://gitlab.gov.ab.ca/dio/core/core-services.git',
          description: 'Repo url.'
        )
        string(
          name: 'source_ref',
          defaultValue: 'refs/heads/master',
          description: 'Ref to build.'
        )
        string(
          name: 'tags',
          defaultValue: '@regression and not @ignore',
          description: 'tags for tests to be executed.'
        )
        string(
          name: 'cypress_config',
          defaultValue: 'cypress.test.json',
          description: 'cypress json file to be used.'
        )
    }

    stages {
      stage("Prepare") {
      steps {
        checkout(
          [
            $class: 'GitSCM',
            branches: [[
              name: "${source_ref}"
            ]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[
              credentialsId: 'core-services-infra-core-services-gitlab',
              url: "${source_repo}"
            ]]
          ]
        )

        sh "npm install"
        }
      }
      stage("Test") {
        steps {
            script {
                // def source = new File('source.txt') //Hello World
                // Update cypress json files with tags and secrets before run the tests
                def text = readFile file: "apps/tenant-management-webapp-e2e/cypress.test.json"
                def text2 = readFile file: "apps/tenant-management-webapp-e2e/cypress.dev.json"
                withVault([ vaultSecrets: vaultSecretEnvMapping]) {
                  text = text.replaceAll(/"TAGS":.+/, "\"TAGS\": \"${tags}\",")
                  text = text.replaceAll(/"core-api-client-secret": \"\",/, "\"core-api-client-secret\": \"$cyTestCoreAPIClientSecret\",")
                  text = text.replaceAll(/"core-api-user-password": \"\",/, "\"core-api-user-password\": \"$cyTestCoreAPIUserPassword\",")
                  text = text.replaceAll(/"client-secret": \"\",/, "\"client-secret\": \"$cyTestClientSecret\",")
                  text = text.replaceAll(/"password": \"\",/, "\"password\": \"$cyTestPassword\",")
                  text = text.replaceAll(/"password2": \"\",/, "\"password2\": \"$cyTestPassword2\",")
                  text2 = text2.replaceAll(/"TAGS":.+/, "\"TAGS\": \"${tags}\",")
                  text2 = text2.replaceAll(/"core-api-client-secret": \"\",/, "\"core-api-client-secret\": \"$cyDevCoreAPIClientSecret\",")
                  text2 = text2.replaceAll(/"core-api-user-password": \"\",/, "\"core-api-user-password\": \"$cyDevCoreAPIUserPassword\",")
                  text2 = text2.replaceAll(/"client-secret": \"\",/, "\"client-secret\": \"$cyDevClientSecret\",")
                  text2 = text2.replaceAll(/"password": \"\",/, "\"password\": \"$cyDevPassword\",")
                  text2 = text2.replaceAll(/"password2": \"\",/, "\"password2\": \"$cyDevPassword2\",")
                }
                writeFile file: "apps/tenant-management-webapp-e2e/cypress.test.json", text: text
                writeFile file: "apps/tenant-management-webapp-e2e/cypress.dev.json", text: text2
                def text3 = readFile file: "apps/tenant-management-webapp-e2e/${cypress_config}"
                echo text3
            }
          sh "npx nx e2e tenant-management-webapp-e2e --dev-server-target='' --browser chrome --headless=true --cypress-config='apps/tenant-management-webapp-e2e/${cypress_config}'"
        }
        post {
          always {
            junit "**/results/*.xml"
            cucumber "**/cucumber-json/*.json"
            sh "node ./apps/tenant-management-webapp-e2e/src/support/multiple-cucumber-html-reporter.js"
            zip zipFile: "cypress-regression-test-html-report-${env.BUILD_NUMBER}.zip", archive: false, dir: 'dist/cypress'
            archiveArtifacts artifacts: "cypress-regression-test-html-report-${env.BUILD_NUMBER}.zip"
          }
       }
     }
    }
}