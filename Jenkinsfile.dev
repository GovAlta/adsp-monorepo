// This Jenskins file is used for builds of branches.
// The pipeline does not use SCM and this file maintained here for reference only.
def baseCommand = "--base=origin/master --head=HEAD"
def push_sha

pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  agent {
    node {
      label "node12"
    }
  }
  parameters {
    string(
      name: 'source_repo',
      defaultValue: 'https://gitlab.gov.ab.ca/dio/core/core-services.git',
      description: 'Repo url.'
    )
    string(
      name: 'source_ref',
      defaultValue: 'refs/heads/master',
      description: 'Ref to build.'
    )
  }
  triggers {
    GenericTrigger(
     genericVariables: [
      [key: 'source_ref', value: '$.ref'],
      [key: 'push_sha', value: '$.checkout_sha', defaultValue: ' ']
     ],
     causeString: 'Building pushed changes ($push_sha) on $source_ref ...',
     tokenCredentialId: 'gitlab-webhook-token',

     printContributedVariables: false,
     printPostContent: false,
     silentResponse: false,

     regexpFilterText: '$source_ref:$push_sha',
     regexpFilterExpression: '^(?!refs/heads/master).*:[^\\s]'
    )
  }
  stages {
    stage("Prepare") {
      steps {
        checkout(
          [
            $class: 'GitSCM',
            branches: [[
              name: push_sha ?: source_ref
            ]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[
              credentialsId: 'core-services-infra-core-services-gitlab',
              url: "${source_repo}"
            ]]
          ]
        )

        sh "npm install"
      }
    }
    stage("Lint"){
      steps {
        sh "npx nx affected --target=lint ${baseCommand} --parallel"
      }
    }
    stage("Test"){
      steps {
        sh "npx nx affected --target=test ${baseCommand} --parallel"
      }
    }
    stage("Build") {
      steps {
        sh "npx nx affected --target=build ${baseCommand} --parallel"
      }
    }
    stage("Cypress Test"){
      steps {
        sh "npx nx e2e tenant-management-webapp-e2e --dev-server-target='' --headless=true --env.'TAGS'='@smoke-test or @dev-build' --baseUrl 'https://tenant-management-webapp-core-services-dev.os99.gov.ab.ca/'"
      }
      post {
        always {
          sh "node ./apps/tenant-management-webapp-e2e/src/support/multiple-cucumber-html-reporter.js"
          zip zipFile: 'cypress-smoke-test-html-report.zip', archive: false, dir: 'dist/cypress'
          archiveArtifacts artifacts: 'cypress-smoke-test-html-report.zip'
        }
      }
    }
  }
  post {
    failure {
      slackSend color: "bad", message: "Core Services branch ${source_ref} build ${env.BUILD_NUMBER} Failed: ${env.BUILD_URL}"
    }
  }
}
