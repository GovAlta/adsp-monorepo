components:
  schemas:
    Queue:
      type: object
      properties:
        namespace:
          type: string
          description: The namespace in which the queue resides.
          example: IRC Applications
        name:
          type: string
          description: The name of the queue.
          example: signatures-required
        description:
          type: string
          description: A brief summary of the queue's purpose.
          example: All IRC documents requiring signatures
        context:
          type: object
          description: an application-defined JSON object to describe the context for the queue.
          example: {}
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
        assignerRoles:
          type: array
          description: Roles that allow a user to assign tasks.
          items:
            type: string
            example: intake-supervisor
        workerRoles:
          type: array
          description: Roles that allow a user to be assigned a task.
          example: intake-assessor
          items:
            type: string
    QueueDurationMetric:
      type: object
      properties:
        avg:
          type: number
        min:
          type: number
        max:
          type: number
    QueueMetrics:
      type: object
      properties:
        namespace:
          type: string
          description: The namespace in which the queue resides.
          example: IRC Applications
        name:
          type: string
          description: The name of the queue.
          example: signatures-required
        status:
          type: object
          additionalProperties:
            type: number
        priority:
          type: object
          additionalProperties:
            type: number
        assignedTo:
          type: object
          additionalProperties:
            type: number
        queue:
          $ref: "#/components/schemas/QueueDurationMetric"
        completion:
          $ref: "#/components/schemas/QueueDurationMetric"

/task/v1/queues:
  get:
    tags:
      - Queue
    description: Retrieve all queues for the tenant.
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Queue"

/task/v1/queues/{namespace}/{name}:
  get:
    tags:
      - Queue
    description: Retrieves a specified queue.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Queue"
      404:
        description: Queue not found.

/task/v1/queues/{namespace}/{name}/metrics:
  get:
    tags:
      - Queue
    description: Retrieves metrics for a specified queue.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueueMetrics"
      404:
        description: Queue not found.

/task/v1/queues/{namespace}/{name}/tasks:
  get:
    tags:
      - Queue
    description: Retrieves queued tasks.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: top
        description: Number of tasks to return.
        in: query
        required: false
        schema:
          type: number
      - name: after
        description: Cursor for the page to retrieve.  Use the _page.next_ value returned in the previous call to page sequentially through the data.
        in: query
        required: false
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Task"
                page:
                  type: object
                  properties:
                    after:
                      type: string
                      description: cursor representing the set of data returned.
                      example: Mw==
                    next:
                      type: string
                      description: cursor representing the next set of data to be returned.
                      example: Ng==
                    size:
                      description: The number of tasks returned by the query.
                      example: 10
                      type: number
      404:
        description: Queue not found.
  post:
    tags:
      - Queue
    description: Creates and enqueues a task.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the task.
                example: Signature Required.
              description:
                type: string
                description: A short summary of the task to be performed.
                example: Please sign document number 42
              recordId:
                type: string
                description: An optional, application defined ID for cross-referencing purposes.
                example: 3458763-42
              context:
                type: object
                description: A JSON object used to provide an application-defined context for the task.  Defaults to {}.
                example: { "application": "IRC-Intervention-Check" }
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: number
                    - type: boolean
              priority:
                type: string
                description: The task priority
                enum: [Normal, High, Urgent]
            required: [name]

    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"

/task/v1/queues/{namespace}/{name}/tasks/{id}:
  get:
    tags:
      - Queue
    description: Retrieves queued task.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: id
        description: ID of the queue task.
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      404:
        description: Queue not found.
  patch:
    tags:
      - Queue
    description: Updates a specified task
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: id
        description: ID of the task.
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The new name of the task.
                example: Signature Required.
              description:
                type: string
                description: The new task description.
                example: Please sign document number 43!
              context:
                type: object
                description: A new context for the task.
                example: {}
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: number
                    - type: boolean
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      404:
        description: Task not found.
  post:
    tags:
      - Queue
    description: Executes a task operation.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: id
        description: ID of the task.
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/AssignTask"
              - $ref: "#/components/schemas/SetTaskPriority"
              - $ref: "#/components/schemas/StartTask"
              - $ref: "#/components/schemas/CompleteTask"
              - $ref: "#/components/schemas/CancelTask"
            discriminator:
              propertyName: operation
              mapping:
                assign: "#/components/schemas/AssignTask"
                set-priority: "#/components/schemas/SetTaskPriority"
                start: "#/components/schemas/StartTask"
                complete: "#/components/schemas/CompleteTask"
                cancel: "#/components/schemas/CancelTask"
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      404:
        description: Task not found.

/task/v1/queues/{namespace}/{name}/assigners:
  get:
    tags:
      - Queue
    description: Retrieves users with the assigner roles for the queue. Requesting user must have view permissions for realm and users.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: The assigner's ID
                    example: cedea364-7c33-40f6-97fc-fba37330d68a
                  name:
                    type: string
                    description: The assigner's name
                    example: Bob Bing
                  email:
                    type: string
                    description: The assigner's email address
                    example: bobbing@gmail.ca
      404:
        description: Queue not found.

/task/v1/queues/{namespace}/{name}/workers:
  get:
    tags:
      - Queue
    description: Retrieves users with the workers roles for the queue. Requesting user must have view permissions for realm and users.
    parameters:
      - name: namespace
        description: Namespace of the queue.
        in: path
        required: true
        schema:
          type: string
      - name: name
        description: Name of the queue.
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: The worker's ID
                    example: cedea364-7c33-40f6-97fc-fba37330d68a
                  name:
                    type: string
                    description: The worker's name
                    example: Bob Bing
                  email:
                    type: string
                    description: The worker's email address
                    example: bobbing@gmail.ca
      404:
        description: Queue not found.
