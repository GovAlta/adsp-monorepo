components:
  schemas:
    Task:
      type: object
      description: A task represents an action that a user must perform within a specified period of time.
      properties:
        id:
          type: string
          description: Used to uniquely identify the task in the system.  Generated when the task is created, use this ID in subsequent API calls.
          example: f3a3bc74-494e-4bb5-b5f3-d29a34edd275
        name:
          type: string
          description: The name of the task, unique to the namespace in which it resides.
          example: IRC-approval
        description:
          type: string
          description: A brief description of the task to be performed.
          example: Please sign off on the completed IRC
        queue:
          type: object
          description: The queue to which the task has been submitted.
          properties:
            namespace:
              type: string
              description: The namespace in which the queue resides.
              example: IRC-application
            name:
              type: string
              description: The name of the queue.
              example: IRC-approvals
          required: [namespace, name]
        recordId:
          type: string
          description: An optional value for additional application defined context.
          example: cedea364-7c33-40f6-97fc-fba37330d68a
        context:
          type: object
          description: A JSON object used to provide an application-defined context for the task.  Defaults to {}.
          example: { 'application': 'IRC' }
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
        data:
          type: object
          description: An optional, JSON object containing application-defined data to further define the task.
          example: {}
        priority:
          type: string
          description: Tasks can be prioritized in a queue.  Higher priority tasks are pushed to the front.
          enum:
            - Normal
            - High
            - Urgent
        status:
          type: string
          description: Applications can use the task's status to mark its progress through some workflow.
          enum:
            - Pending
            - In Progress
            - Completed
            - Cancelled
        assignment:
          $ref: '#/components/schemas/TaskAssignment'
        createdOn:
          type: string
          format: date-time
          description: Task creation date
        startedOn:
          type: string
          format: date-time
          description: task start date
        endedOn:
          type: string
          format: date-time
          description: task completion  date
    TaskAssignment:
      type: object
      description: Tasks are assigned to users for completion, by the task manager.  The assignment property identifies these individuals.
      properties:
        assignedTo:
          type: object
          description: Identifies the user to which the task has been assigned by ID, name, or email address.
          properties:
            id:
              type: string
              example: cedea364-7c33-40f6-97fc-fba37330d68a
            name:
              type: string
              example: Bob Bing
            email:
              type: string
              example: bobbing@gmail.com
        assignedBy:
          type: object
          description: Identifies the user that assigned the task by ID, or name.
          properties:
            id:
              type: string
              example: cedea364-7c33-40f6-97fc-fba37330d68a
            name:
              type: string
              example: Bob Bing
        assignedOn:
          type: string
          format: date-time
          description: Date then task was assigned
    AssignTask:
      type: object
      description: Used when assigning a task to a user
      properties:
        operation:
          type: string
          enum: [assign]
        assignTo:
          type: object
          properties:
            id:
              type: string
              example: cedea364-7c33-40f6-97fc-fba37330d68a
            name:
              type: string
              example: Bob Bing
            email:
              type: string
              example: bobbing@gmail.ca
      required: [operation, assignTo]
    SetTaskPriority:
      type: object
      description: Used when setting a task's priority.
      properties:
        operation:
          type: string
          enum: [set-priority]
        priority:
          type: number
      required: [operation, priority]
    StartTask:
      type: object
      description: Used to set the time that the user began working on the task.
      properties:
        operation:
          type: string
          enum: [start]
      required: [operation]
    CompleteTask:
      type: object
      description: Used to set the time that the user completed the task.
      properties:
        operation:
          type: string
          enum: [complete]
      required: [operation]
    CancelTask:
      type: object
      description: Used to cancel, or invalidate, the task.
      properties:
        operation:
          type: string
          enum: [cancel]
        reason:
          type: string
          description: Indicates why the task was cancelled.
      required: [operation]

/task/v1/tasks:
  get:
    tags:
      - Task
    description: Retrieves tasks defined for for the tenant
    parameters:
      - name: top
        description: Number of task definitions to return in a page.
        example: 10
        in: query
        required: false
        schema:
          type: number
      - name: after
        description: Cursor for retrieving additional pages.  Use the _page.next_ value returned in the previous call to page sequentially through the data.
        example: Mw==
        in: query
        required: false
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              type: object
              description: The set of tasks matching the query.
              properties:
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
                page:
                  type: object
                  properties:
                    after:
                      type: string
                      description: cursor representing the set of data returned.
                      example: Mw==
                    next:
                      type: string
                      description: cursor representing the next set of data to be returned.
                      example: Ng==
                    size:
                      type: number
                      description: The number of tasks returned by the query.
                      example: 10

/task/v1/tasks/{id}:
  get:
    tags:
      - Task
    description: Retrieves a specified task.
    parameters:
      - name: id
        description: ID of the task.
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      404:
        description: Task not found.
  patch:
    tags:
      - Task
    description: Updates a specified task
    parameters:
      - name: id
        description: ID of the task.
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: New name for the task
                example: Signature-required
              description:
                type: string
                description: New description for the task
                example: Please sign IRC number 42
              context:
                type: object
                description: New task context
                example: {}
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: number
                    - type: boolean
              data:
                type: object
                description: Application-defined JSON object to further define the task.
                example: {}
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      404:
        description: Task not found.
  post:
    tags:
      - Task
    description: Executes a task operation.
    parameters:
      - name: id
        description: ID of the task.
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/AssignTask'
              - $ref: '#/components/schemas/SetTaskPriority'
              - $ref: '#/components/schemas/StartTask'
              - $ref: '#/components/schemas/CompleteTask'
              - $ref: '#/components/schemas/CancelTask'
            discriminator:
              propertyName: operation
              mapping:
                assign: '#/components/schemas/AssignTask'
                set-priority: '#/components/schemas/SetTaskPriority'
                start: '#/components/schemas/StartTask'
                complete: '#/components/schemas/CompleteTask'
                cancel: '#/components/schemas/CancelTask'
    responses:
      200:
        description: Request completed successfully.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      404:
        description: Task not found.
