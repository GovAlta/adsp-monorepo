components:
  schemas:
    FormDefinition:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        anonymousApply:
          type: boolean
        applicantRoles:
          type: array
          items:
            type: string
        assessorRoles:
          type: array
          items:
            type: string
        clerkRoles:
          type: array
          items:
            type: string
        dataSchema:
          type: object
    Form:
      type: object
      properties:
        urn:
          type: string
        id:
          type: string
        definitionId:
          type: string
        anonymousApplicant:
          type: boolean
        applicant:
          type: object
          properties:
            addressAs:
              type: string
        status:
          type: string
          enum: [draft, locked, submitted, archived]
        created:
          type: string
          format: date-time
        createdBy:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
          required: [id, name]
        lastAccessed:
          type: string
          format: date-time
        locked:
          type: string
          format: date-time
        submitted:
          type: string
          format: date-time
    FormData:
      type: object
      properties:
        data:
          type: object
        files:
          type: object
          additionalProperties:
            type: string
            format: uri
    FormSubmissionCriteria:
      type: object
      properties:
        tenantIdEquals:
          type: string
        definitionIdEquals:
          type: string
        statusEquals:
          type: string
        createDateBefore:
          type: string
          format: date-time
        createDateAfter:
          type: string
          fFFilGFormat: date-time
        dispositionStatusEquals:
          type: string
        dispositionDateEquals:
          type: string
          format: date-time
        createdByIdEquals:
          type: string
    FormDisposition:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        reason:
          type: string
        date:
          type: string
          format: date-time
    FormSubmission:
      type: object
      properties:
        id:
          type: string
        definitionId:
          type: string
        tenantId:
          type: string
        formId:
          type: string
        formData:
          type: object
        formFiles:
          type: object
        created:
          type: string
          format: date-time
        createdBy:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        updatedBy:
          type: string
        updatedDateTime:
          type: string
          format: date-time
        submissionStatus:
          type: string

    SendCodeOperation:
      type: object
      properties:
        operation:
          type: string
          enum: [send-code]
    UnlockFormOperation:
      type: object
      properties:
        operation:
          type: string
          enum: [unlock]
    SubmitFormOperation:
      type: object
      properties:
        operation:
          type: string
          enum: [submit]
    ArchiveFormOperation:
      type: object
      properties:
        operation:
          type: string
          enum: [archive]

/form/v1/definitions:
  get:
    tags:
      - Form
    description: Retrieves form definitions.
    responses:
      200:
        description: Successfully retrieved form definitions.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FormDefinition'
/form/v1/definitions/{definitionId}:
  get:
    tags:
      - Form
    description: Retrieves a form definition.
    parameters:
      - name: definitionId
        description: ID of the form definition.
        required: true
        in: path
        schema:
          type: string
    responses:
      200:
        description: Successfully retrieved a form definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormDefinition'

/form/v1/forms:
  get:
    tags:
      - Form
    description: Find forms.
    parameters:
      - name: top
        description: Number of forms to return in a page.
        in: query
        required: false
        schema:
          type: number
      - name: after
        description: Cursor for retrieving additional pages.
        in: query
        required: false
        schema:
          type: string
      - name: criteria
        description: Criteria for the forms to retrieve.
        in: query
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                anonymousApplicant:
                  type: boolean
                definitionIdEquals:
                  type: string
                statusEquals:
                  type: string
                  enum: [draft, locked, submitted, archived]
                lastAccessedBefore:
                  type: string
                  format: date-time
                lockedBefore:
                  type: string
                  format: date-time
                createdByIdEquals:
                  type: string
    responses:
      200:
        description: Successfully created a form.
        content:
          application/json:
            schema:
              type: object
              properties:
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/Form'
                page:
                  type: object
                  properties:
                    after:
                      type: string
                    next:
                      type: string
                    size:
                      type: number
  post:
    tags:
      - Form
    description: Creates a draft form.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              definitionId:
                type: string
              applicant:
                type: object
                properties:
                  userId:
                    type: string
                  addressAs:
                    type: string
                  channels:
                    type: array
                    items:
                      type: object
                      properties:
                        channel:
                          type: string
                          enum: [email, sms]
                        address:
                          type: string
                      required: [channel, address]
            required: [definitionId, applicant]
    responses:
      200:
        description: Successfully created a form.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'

/form/v1/forms/{formId}:
  parameters:
    - name: formId
      description: ID of the form.
      required: true
      in: path
      schema:
        type: string
  get:
    tags:
      - Form
    description: Retrieves a form.
    responses:
      200:
        description: Successfully retrieved the form.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
  post:
    tags:
      - Form
    description: Executes a form operation.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/UnlockFormOperation'
              - $ref: '#/components/schemas/SubmitFormOperation'
              - $ref: '#/components/schemas/ArchiveFormOperation'
              - $ref: '#/components/schemas/SendCodeOperation'
            discriminator:
              propertyName: operation
              mapping:
                unlock: '#/components/schemas/UnlockFormOperation'
                submit: '#/components/schemas/SubmitFormOperation'
                archive: '#/components/schemas/ArchiveFormOperation'
                send-code: '#/components/schemas/SendCodeOperation'
    responses:
      200:
        description: Successfully executed operation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
  delete:
    tags:
      - Form
    description: Deletes a form.
    responses:
      200:
        description: Successfully deleted the form.
        content:
          application/json:
            schema:
              type: object
              properties:
                deleted:
                  type: boolean

/form/v1/forms/{formId}/data:
  parameters:
    - name: formId
      description: ID of the form.
      required: true
      in: path
      schema:
        type: string
  get:
    tags:
      - Form
    description: Retrieves form data.
    parameters:
      - name: code
        description: Verify code for accessing the form data.
        required: false
        in: query
        schema:
          type: string
    responses:
      200:
        description: Successfully retrieved the form.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormData'
  put:
    tags:
      - Form
    description: Sets the form data.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
              files:
                type: object
                additionalProperties:
                  type: string
                  format: uri
    responses:
      200:
        description: Successfully updated the form.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormData'
/form/v1/forms/{formId}/submissions/{submissionId}:
  parameters:
    - name: formId
      description: ID of the form.
      required: true
      in: path
      schema:
        type: string
    - name: submissionId
      description: ID of the submission.
      required: true
      in: path
      schema:
        type: string
  get:
    tags:
      - Form Submission
    description: Retrieves a form submission.
    responses:
      200:
        description: Successfully retrieved the form submission.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormSubmission'
/form/v1/forms/{formId}/submissions:
  parameters:
    - name: formId
      description: ID of the form.
      required: true
      in: path
      schema:
        type: string
  get:
    tags:
      - Form Submission
    description: |
      Retrieves form submissions from a set of search criteria.
      - You begin by asking for the top (first) N files, e.g. ```top=N&criteria={"definitionId": "Form1"}```.  If unspecified, top defaults to 50.
      - The API responds by returning the form submissions and the starting point for the **next** set of results, if any more are available.
      - In subsequent calls, pass the returned **next** value as the *after* parameter, e.g. ```top=N&after=next&criteria={"filenameContains": "Bob"}```
      - Continue iterating until **next** is undefined.
    parameters:
      - name: top
        description: Number of form submissions to return in the page, e.g. the top N files.
        example: 10
        in: query
        required: false
        schema:
          type: number
      - name: after
        description: Cursor for retrieving additional pages.  Use the **next** value returned by the previous call to GET /form/v1/forms/{formId}/submissions.
        example: Mw==
        in: query
        required: false
        schema:
          type: string
      - name: criteria
        description: Criteria for form submissions to retrieve.
        in: query
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                typeEquals:
                  description: The ID of the File Type collection associated with a file when it is created. There is a one-to-many relationship between a File Type collection and files.
                  example: generated-pdf
                  type: string
                recordIdEquals:
                  description: An application-defined record ID; associated with a file when it is created. There is a one-to-many relationship between a record ID and files.
                  example: 53fca659-362d-407f-9c4d-c2c8c6427bdb
                  type: string
                filenameContains:
                  description: Returns all files that have a file name matching "*.${inputString}*.", e.g. "Bobs" will match "Bobs PDF file", and "Word file of Bobs".
                  example: Bob
                  type: string
                lastAccessedBefore:
                  description: Returns all files with lastAccessed before (exclusive) the ISO 8061 timestamp provided.
                lastAccessedAfter:
                  description: Returns all files with lastAccessed after (exclusive) the ISO 8061 timestamp provided.

    responses:
      200:
        description: Successfully retrieved the form submissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormSubmission'
