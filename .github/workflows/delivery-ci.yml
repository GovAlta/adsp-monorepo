name: Delivery CI

on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      affected_apps: ${{ steps.set_outputs.outputs.affected_apps }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - run: npm ci
      - id: get_branch_name
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
      - name: Get last successful commit
        uses: nrwl/last-successful-commit-action@v1
        id: last_successful_commit
        with:
          branch: main
          workflow_id: delivery-ci.yml
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        id: production-build
        uses: ./.github/actions/nx-production-build
        with:
          affected-base: ${{ steps.last_successful_commit.outputs.commit_hash }}
      - run: npm prune --production
      - run: tar czf adsp-build-dist.tar.gz node_modules/ dist/ .openshift/ package.json package-lock.json
      - uses: actions/upload-artifact@v2
        with:
          name: build-dist
          path: adsp-build-dist.tar.gz
      # Set build job outputs for subsequent jobs.
      - id: set_outputs
        run: echo ::set-output name=affected_apps::$(echo ${{ steps.production-build.outputs.affected-apps }})

  build-containers:
    runs-on: ubuntu-20.04
    needs: build
    if: needs.build.outputs.affected_apps
    strategy:
      matrix:
        app: ${{ fromJson(needs.build.outputs.affected_apps) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-dist
      - name: Build container
        uses: ./.github/actions/build-publish-container
        with:
          app: ${{ matrix.app }}
          redhat-io-username: ${{ secrets.REGISTRY_REDHAT_IO_USER }}
          redhat-io-password: ${{ secrets.REGISTRY_REDHAT_IO_PASSWORD }}
          ghcr-token: ${{ secrets.GITHUB_TOKEN }}


  #     - name: Oc login
  #       uses: redhat-actions/oc-login@v1
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

  #         # Disables SSL cert checking. Use this if you don't have the certificate authority data.
  #         insecure_skip_tls_verify: true
  #         # This method is more secure, if the certificate from Step 4 is available.
  #         # certificate_authority_data: ${{ secrets.CA_DATA }}

  #         namespace: core-services-infra

  #     - name: Build containers
  #       run: |
  #         for app in $AFFECTED_APPS
  #         do
  #           if [[ $(oc describe build $app) == *"Source"* ]]
  #           then
  #             oc start-build $app --from-dir=dist/apps/$app --wait --follow
  #           else
  #             tar czf $app.tar.gz node_modules/ dist/apps/$app .openshift/service/ package.json package-lock.json
  #             oc start-build $app --from-archive=$app.tar.gz --wait --follow
  #           fi
  #         done

  #     # Set build job outputs for subsequent jobs.
  #     - id: set_outputs
  #       run: echo ::set-output name=affected_apps::$AFFECTED_APPS

  # deployDev:
  #   runs-on: ubuntu-20.04
  #   needs: build
  #   if: needs.build.outputs.affected_apps
  #   env:
  #     AFFECTED_APPS: ${{ needs.build.outputs.affected_apps }}
  #   environment:
  #     name: Dev
  #   steps:
  #     - name: Oc login
  #       uses: redhat-actions/oc-login@v1
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         namespace: core-services-infra
  #         insecure_skip_tls_verify: true
  #     - name: Tag Dev
  #       run: |
  #         for app in $AFFECTED_APPS
  #         do
  #           oc tag $app:latest $app:dev
  #         done
  #     - name: Deploy Dev
  #       run: |
  #         for app in $AFFECTED_APPS
  #         do
  #           oc project core-services-dev
  #           oc rollout latest dc/$app
  #           oc rollout status dc/$app
  #         done

  # devSmokeTest:
  #   runs-on: ubuntu-20.04
  #   needs: [build, deployDev]
  #   environment:
  #     name: Dev-e2e
  #   strategy:
  #     matrix:
  #       app: [tenant-management-webapp, status-app]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "12"
  #     - uses: actions/cache@v2
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #     - run: |
  #         sed -i -r \
  #           -e "s/\"TAGS\":.+\"\"/\"TAGS\": \"@smoke-test and not @ignore\"/" \
  #           -e "s/\"core-api-client-secret\":.+\"\"/\"core-api-client-secret\": \"${{ secrets.CY_CORE_API_CLIENT_SECRET }}\"/" \
  #           -e "s/\"core-api-user-password\":.+\"\"/\"core-api-user-password\": \"${{ secrets.CY_CORE_API_USER_PASSWORD }}\"/" \
  #           -e "s/\"client-secret\":.+\"\"/\"client-secret\": \"${{ secrets.CY_CLIENT_SECRET }}\"/" \
  #           -e "s/\"password\":.+\"\"/\"password\": \"${{ secrets.CY_PASSWORD }}\"/" \
  #           -e "s/\"password2\":.+\"\"/\"password2\": \"${{ secrets.CY_PASSWORD2 }}\"/" \
  #           -e "s/\"password3\":.+\"\"/\"password3\": \"${{ secrets.CY_PASSWORD3 }}\"/" \
  #           apps/${{ matrix.app }}-e2e/cypress.dev.json
  #     - name: E2E Test
  #       uses: cypress-io/github-action@v2
  #       with:
  #         install-command: npm ci
  #         command: npx nx e2e ${{ matrix.app }}-e2e --dev-server-target='' --browser chrome --headless=true --cypress-config="apps/${{ matrix.app }}-e2e/cypress.dev.json"
  #     - if: ${{ always() }}
  #       run: |
  #         node apps/${{ matrix.app }}-e2e/src/support/multiple-cucumber-html-reporter.js
  #     - if: ${{ always() }}
  #       name: Upload Cypress Results
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ matrix.app }}-dev-cypress-reports
  #         path: dist/cypress/apps/${{ matrix.app }}-e2e/

  # deployTest:
  #   runs-on: ubuntu-20.04
  #   needs: [build, devSmokeTest]
  #   env:
  #     AFFECTED_APPS: ${{ needs.build.outputs.affected_apps }}
  #   environment:
  #     name: Test
  #   steps:
  #     - name: Oc login
  #       uses: redhat-actions/oc-login@v1
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         namespace: core-services-infra
  #         insecure_skip_tls_verify: true
  #     - name: Tag Test
  #       run: |
  #         for app in $AFFECTED_APPS
  #         do
  #           oc tag $app:dev $app:test
  #         done
  #     - name: Deploy Test
  #       run: |
  #         for app in $AFFECTED_APPS
  #         do
  #           oc project core-services-test
  #           oc rollout latest dc/$app
  #           oc rollout status dc/$app
  #         done

  # testSmokeTest:
  #   runs-on: ubuntu-20.04
  #   needs: [build, deployTest]
  #   environment:
  #     name: Test-e2e
  #   strategy:
  #     matrix:
  #       app: [tenant-management-webapp, status-app]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "12"
  #     - uses: actions/cache@v2
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #     - run: |
  #         sed -i -r \
  #           -e "s/\"TAGS\":.+\"\"/\"TAGS\": \"@smoke-test and not @ignore\"/" \
  #           -e "s/\"core-api-client-secret\":.+\"\"/\"core-api-client-secret\": \"${{ secrets.CY_CORE_API_CLIENT_SECRET }}\"/" \
  #           -e "s/\"core-api-user-password\":.+\"\"/\"core-api-user-password\": \"${{ secrets.CY_CORE_API_USER_PASSWORD }}\"/" \
  #           -e "s/\"client-secret\":.+\"\"/\"client-secret\": \"${{ secrets.CY_CLIENT_SECRET }}\"/" \
  #           -e "s/\"password\":.+\"\"/\"password\": \"${{ secrets.CY_PASSWORD }}\"/" \
  #           -e "s/\"password2\":.+\"\"/\"password2\": \"${{ secrets.CY_PASSWORD2 }}\"/" \
  #           -e "s/\"password3\":.+\"\"/\"password3\": \"${{ secrets.CY_PASSWORD3 }}\"/" \
  #           apps/${{ matrix.app }}-e2e/cypress.test.json
  #     - name: E2E Test
  #       uses: cypress-io/github-action@v2
  #       with:
  #         install-command: npm ci
  #         command: npx nx e2e ${{ matrix.app }}-e2e --dev-server-target='' --browser chrome --headless=true --cypress-config="apps/${{ matrix.app }}-e2e/cypress.test.json"
  #     - if: ${{ always() }}
  #       run: |
  #         node apps/${{ matrix.app }}-e2e/src/support/multiple-cucumber-html-reporter.js
  #     - if: ${{ always() }}
  #       name: Upload Cypress Results
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ matrix.app }}-test-cypress-reports
  #         path: dist/cypress/apps/${{ matrix.app }}-e2e/
